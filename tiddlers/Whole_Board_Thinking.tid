created: 20151227070031841
modified: 20151227201103909
tags: 
title: Whole Board Thinking
tmap.id: 8e927e14-83a9-4048-a3d6-ad9c0041b392
type: text/vnd.tiddlywiki

* [[The Game of Go]] is the most complex game humans play outside of business. We can't win by playing it tactically like we'd play chess or cards. Just responding to what other players do makes our play predictable and easy to exploit.

* Agile reduces risk and raises ROI through [[Continuous Delivery]]. But we're in danger of falling into many {{Frame Problem}}s that result in our continously delivering a product with.poor [[Product-Market Fit]] and building team portfolios with poor [[Team-Product Fit]]. This is because first generation Agile is a {{Hill-Climbing Algorithm}}. It's happy to climb a mole-hill of ROI when there's an Everest right next door. 

* Such fit problems turn up late in the release cycle when there's inadequate time to deal with them without costly rework and consequent blame games, scape-goating and initiatives to return to {{Big Design Up Front}} "because then we'd have known what we should have been doing".

''Therefore,'''

''Whole Board Thinking'' is a cycle of figuring out which decision is the most important one to make next:

# Integrate the latest metric and analytic information you've received into your maps of the market, of your organization, of your product, and/or of your design
# Considering this entire problem space breadth-first, determine which broad region of it is most fertile for development. This may be the hottest fire to fight, but often it's a region that hasn't been developed at all, where you have no market yet, no organization, no product, and/or no design.
# Determine how to quantify the strategic forces that are most influential in this region. Don't be afraid to experiment to obtain better metrics.
# Actually quantify the strategic forces, don't just go by gut. If you're fighting a fire this may be easy, but consider that even then you may not be quantifying causes, but merely effects.
# Knowing [[Pattern Language]]s for responding tactically to these forces helps to understand what a good solution might be. But don't just apply a pattern.
# Instead, try to solve it yourself. If your solution is very different to the patterns, consider that it might be sub-optimal. Experiment to learn whether it is or not.
# At the [[Last Responsible Moment]], make the decision.
# Forget it. Return your focus to the whole board.