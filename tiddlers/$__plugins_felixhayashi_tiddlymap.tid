author: Felix Küppers
core-version: >=5.1.5
created: 20150806095659170
dependents: $:/plugins/felixhayashi/vis
depends: $:/plugins/felixhayashi/vis
description: TiddlyMap – Map drawing and topic visualization for your wiki
list: readme license
plugin-type: plugin
released: Fri, 17 Jul 2015 17:52:22 +0200
source: https://github.com/felixhayashi/TW5-TiddlyMap
suggested: $:/plugins/felixhayashi/topstoryview
title: $:/plugins/felixhayashi/tiddlymap
type: application/json
version: 0.8.5+4946

{
    "tiddlers": {
        "$:/plugins/felixhayashi/tiddlymap/layout": {
            "text": ".tmap-flash-message {\n  border: 1px solid lightgray;\n  padding: 5px; }\n  .tmap-flash-message.tmap-valid {\n    background: #D1EED4; }\n  .tmap-flash-message.tmap-malformed {\n    background: #EED5D1; }\n\n.tmap-graph-placeholder::before {\n  content: \"TiddlyMap\";\n  display: block;\n  text-align: center;\n  padding: 20px;\n  background-color: whitesmoke; }\n\nhtml {\n  /*\n  body {\n    background: url(unquote('<$macrocall $name=\"makedatauri\" type={{$:/plugins/felixhayashi/tiddlymap/media/surface.png!!type}} text={{$:/plugins/felixhayashi/tiddlymap/media/surface.png}}/>'));\n  }\n  */ }\n  html .tmap-link {\n    color: #5778D8; }\n    html .tmap-link:hover {\n      color: white;\n      background: #5778D8; }\n  html .tmap-small-list, html .tmap-very-small-list {\n    overflow: auto;\n    min-height: 20px;\n    max-height: 150px;\n    display: block; }\n  html .tmap-very-small-list {\n    max-height: 70px; }\n  html .tmap-quick-connect {\n    font-size: 0.7em; }\n    html .tmap-quick-connect .tc-drop-down {\n      padding: 5px;\n      width: 250px;\n      white-space: normal;\n      line-height: 1em;\n      position: absolute;\n      z-index: 1000;\n      right: 50px; }\n      html .tmap-quick-connect .tc-drop-down select {\n        width: 80px;\n        word-wrap: initial; }\n      html .tmap-quick-connect .tc-drop-down table {\n        border: none;\n        margin-bottom: 0px; }\n        html .tmap-quick-connect .tc-drop-down table td {\n          padding: 3px;\n          border: none;\n          vertical-align: top; }\n      html .tmap-quick-connect .tc-drop-down .tmap-scroll-table {\n        height: 120px;\n        overflow: auto;\n        display: block; }\n      html .tmap-quick-connect .tc-drop-down hr {\n        border: 0;\n        height: 0;\n        border-top: 1px solid rgba(0, 0, 0, 0.1);\n        border-bottom: 1px solid rgba(255, 255, 255, 0.3); }\n      html .tmap-quick-connect .tc-drop-down a {\n        display: inline;\n        padding: 0;\n        color: #5778d8;\n        background: transparent; }\n        html .tmap-quick-connect .tc-drop-down a:hover {\n          background: transparent;\n          color: #5778d8;\n          text-decoration: underline; }\n      html .tmap-quick-connect .tc-drop-down button {\n        display: inline-block;\n        padding: 0px 3px;\n        width: auto;\n        text-align: left;\n        color: #333333;\n        line-height: 1; }\n        html .tmap-quick-connect .tc-drop-down button:hover {\n          color: #ffffff; }\n        html .tmap-quick-connect .tc-drop-down button svg:hover {\n          fill: #ffffff; }\n  html .tc-modal-wrapper {\n    z-index: 1010; }\n    html .tc-modal-wrapper .tc-modal-header svg {\n      vertical-align: sub; }\n    html .tc-modal-wrapper .tc-modal-header h3 {\n      line-height: 10px; }\n    html .tc-modal-wrapper .tc-modal-body {\n      min-height: 250px;\n      max-height: 70vh;\n      overflow: auto; }\n      html .tc-modal-wrapper .tc-modal-body > div > p:first-child {\n        margin-top: 0px; }\n      html .tc-modal-wrapper .tc-modal-body > div > p:last-child {\n        margin-bottom: 0px; }\n      html .tc-modal-wrapper .tc-modal-body .tc-image-button {\n        font-size: 14px; }\n      html .tc-modal-wrapper .tc-modal-body .tmap-modal-editor .tc-tiddler-frame {\n        padding: 0px;\n        width: auto;\n        margin: 0px;\n        border: none; }\n        html .tc-modal-wrapper .tc-modal-body .tmap-modal-editor .tc-tiddler-frame .tc-tiddler-title {\n          display: none; }\n      html .tc-modal-wrapper .tc-modal-body #edge-type-manager .tc-tab-buttons {\n        padding-top: 0px; }\n      html .tc-modal-wrapper .tc-modal-body #edge-type-manager > div:first-child {\n        height: 100%;\n        float: left;\n        width: 20%;\n        position: fixed; }\n        html .tc-modal-wrapper .tc-modal-body #edge-type-manager > div:first-child .searchbar input {\n          width: 100%; }\n        html .tc-modal-wrapper .tc-modal-body #edge-type-manager > div:first-child ul {\n          height: calc(100% - 135px);\n          overflow: auto;\n          margin: 5px 0 0 0;\n          padding-left: 0px;\n          list-style: none; }\n          html .tc-modal-wrapper .tc-modal-body #edge-type-manager > div:first-child ul li {\n            white-space: nowrap; }\n      html .tc-modal-wrapper .tc-modal-body #edge-type-manager > div:last-child {\n        height: 100%;\n        width: calc(80% - 20px);\n        margin-left: 22%; }\n      html .tc-modal-wrapper .tc-modal-body fieldset legend {\n        font-weight: bold; }\n      html .tc-modal-wrapper .tc-modal-body table {\n        margin: 6px 0;\n        clear: both;\n        border: none;\n        width: 100%; }\n        html .tc-modal-wrapper .tc-modal-body table td, html .tc-modal-wrapper .tc-modal-body table th {\n          border: 1px solid lightgray; }\n        html .tc-modal-wrapper .tc-modal-body table.tmap-key-value-table th {\n          width: 30%; }\n        html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr:nth-child(odd) {\n          background-color: #E8E8E8; }\n        html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr:nth-child(even) {\n          background-color: #FFFFFF; }\n        html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr:hover {\n          background-color: #FFFFF3; }\n        html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr td {\n          border: none;\n          vertical-align: top;\n          padding: 5px; }\n          html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr td:first-child {\n            width: 15%; }\n          html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr td:last-child {\n            width: 35%; }\n          html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr td input, html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr td textarea, html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr td select {\n            width: 100%;\n            /* prevents bad looking select boxes and wrapping in textareas */\n            word-wrap: normal; }\n        html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr .tmap-note {\n          margin: 10px 10px 10px 0; }\n        html .tc-modal-wrapper .tc-modal-body table.tmap-config-table tr .tmap-description {\n          font-style: italic; }\n        html .tc-modal-wrapper .tc-modal-body table ul {\n          padding-left: 30px; }\n          html .tc-modal-wrapper .tc-modal-body table ul li {\n            list-style: none; }\n    html .tc-modal-wrapper .tc-modal-footer {\n      padding: 8px; }\n      html .tc-modal-wrapper .tc-modal-footer .tmap-dialog-button {\n        font-weight: bold; }\n      html .tc-modal-wrapper .tc-modal-footer .tmap-hidden-close-button {\n        display: none; }\n  html #tmap-node-filter-dialog #tmap-filter-tips {\n    font-size: 0.8em; }\n  html #tmap-node-filter-dialog textarea {\n    height: 100px;\n    max-height: 300px;\n    overflow: auto;\n    width: 100%;\n    font-size: 11px;\n    font-family: \"Courier New\", Courier, monospace; }\n  html .tc-sidebar-scrollable .tmap-widget {\n    position: relative;\n    min-height: 350px; }\n    html .tc-sidebar-scrollable .tmap-widget.tmap-halfscreen {\n      position: absolute;\n      right: 0px;\n      top: 0;\n      left: 0px;\n      bottom: 0;\n      padding: 0px;\n      width: 100% !important;\n      border: none;\n      border-left: 1px solid lightgray;\n      height: 100% !important;\n      margin: 0;\n      background: #ececec;\n      z-index: 1000; }\n  html .tmap-widget {\n    position: relative;\n    border: 1px dotted lightgray;\n    padding: 2px;\n    width: 100%;\n    color: #666666;\n    display: block; }\n    html .tmap-widget .tmap-loading-bar {\n      display: block;\n      position: absolute;\n      text-align: center;\n      font-size: 2em;\n      padding: 10px;\n      top: 50%;\n      background: rgba(245, 245, 245, 0.5);\n      z-index: 1;\n      width: 250px;\n      margin: auto;\n      left: 0px;\n      right: 0px; }\n    html .tmap-widget.tmap-click-to-use:not(.tmap-fullscreen) .vis-network:not(.vis-active) {\n      cursor: pointer; }\n      html .tmap-widget.tmap-click-to-use:not(.tmap-fullscreen) .vis-network:not(.vis-active) .vis-navigation {\n        display: none; }\n      html .tmap-widget.tmap-click-to-use:not(.tmap-fullscreen) .vis-network:not(.vis-active):hover:before {\n        box-shadow: 10px 10px 5px lightgray;\n        color: gray;\n        background: white;\n        content: \"Click to use\";\n        font-size: 18px;\n        font-weight: bold;\n        left: 50%;\n        margin-left: -100px;\n        position: absolute;\n        text-align: center;\n        top: 50px;\n        width: 200px;\n        z-index: 2000;\n        padding: 5px;\n        pointer-events: none; }\n    html .tmap-widget .tmap-vis-graph {\n      height: calc(100% - 35px); }\n      html .tmap-widget .tmap-vis-graph .vis-network .vis-network-tooltip {\n        max-width: 250px;\n        white-space: normal; }\n      html .tmap-widget .tmap-vis-graph .vis-network .vis-manipulation {\n        border-top: 1px solid #d6d9d8;\n        background: rgba(245, 245, 245, 0.7); }\n      html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button.tmap-button-enabled {\n        right: 15px; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button.tmap-button-enabled.tmap-fullscreen-button {\n          bottom: 90px;\n          background-image: url(<$macrocall $name=\"makedatauri\" type=\"image/png\" text={{$:/plugins/felixhayashi/tiddlymap/media/fullscreen.png}} />); }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button.tmap-button-enabled.tmap-halfscreen-button {\n          bottom: 130px;\n          background-image: url(<$macrocall $name=\"makedatauri\" type=\"image/png\" text={{$:/plugins/felixhayashi/tiddlymap/media/halfscreen.png}} />); }\n      html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover {\n        box-shadow: 0 0 3px 3px rgba(75, 75, 75, 0.3); }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover:before {\n          background: beige;\n          display: block;\n          color: black;\n          padding: 3px;\n          position: relative;\n          border: 1px solid lightgray;\n          width: 80px;\n          left: -70px;\n          top: -30px;\n          z-index: 1000;\n          text-align: center; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.vis-up:before {\n          left: 30px;\n          content: \"Scroll up\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.vis-down:before {\n          left: 30px;\n          content: \"Scroll down\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.vis-right:before {\n          left: 30px;\n          content: \"Scroll right\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.vis-left:before {\n          left: 30px;\n          content: \"Scroll left\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.vis-zoomOut:before {\n          content: \"Zoom out\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.vis-zoomIn:before {\n          content: \"Zoom in\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.vis-zoomExtends:before {\n          content: \"Reset focus\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.tmap-fullscreen-button:before {\n          content: \"Fullscreen\"; }\n        html .tmap-widget .tmap-vis-graph .vis-network .vis-navigation .vis-button:hover.tmap-halfscreen-button:before {\n          content: \"Halfscreen\"; }\n    html .tmap-widget.tmap-no-buttons .vis-navigation {\n      display: none; }\n    html .tmap-widget.tmap-advanced-editor {\n      background: #F2F2F2; }\n      html .tmap-widget.tmap-advanced-editor .tmap-topbar {\n        background: #d6d9d8; }\n        html .tmap-widget.tmap-advanced-editor .tmap-topbar .tmap-radar-button {\n          font-size: 1.5em;\n          vertical-align: middle; }\n    html .tmap-widget .tmap-menu-bar {\n      width: 100%; }\n    html .tmap-widget .tmap-topbar {\n      background: #F5F5F5;\n      border-bottom: 1px solid lightgray;\n      padding: 3px 5px;\n      height: 35px;\n      position: relative; }\n      html .tmap-widget .tmap-topbar .tmap-view-label {\n        width: 100%;\n        text-align: center;\n        font-weight: bold;\n        padding-top: 3px; }\n      html .tmap-widget .tmap-topbar .tmap-focus-button {\n        position: absolute;\n        right: 10px; }\n        html .tmap-widget .tmap-topbar .tmap-focus-button input {\n          width: 140px; }\n      html .tmap-widget .tmap-topbar .tmap-popup {\n        position: relative; }\n        html .tmap-widget .tmap-topbar .tmap-popup .tc-drop-down {\n          position: absolute;\n          z-index: 999;\n          right: 0px; }\n      html .tmap-widget .tmap-topbar .tc-drop-down {\n        background-color: #F3F3F3;\n        min-width: 170px;\n        max-width: 210px;\n        padding: 5px;\n        margin: 5px 0; }\n        html .tmap-widget .tmap-topbar .tc-drop-down button, html .tmap-widget .tmap-topbar .tc-drop-down a {\n          padding: 0px;\n          text-decoration: none; }\n          html .tmap-widget .tmap-topbar .tc-drop-down button:hover, html .tmap-widget .tmap-topbar .tc-drop-down a:hover {\n            color: #ffffff; }\n          html .tmap-widget .tmap-topbar .tc-drop-down button svg, html .tmap-widget .tmap-topbar .tc-drop-down a svg {\n            vertical-align: middle; }\n      html .tmap-widget .tmap-topbar [hidden] {\n        display: none; }\n      html .tmap-widget .tmap-topbar .tc-block-dropdown {\n        width: 370px;\n        min-width: 370px;\n        padding: 5px;\n        margin: 15px 0 0 -370px; }\n        html .tmap-widget .tmap-topbar .tc-block-dropdown a {\n          display: inline;\n          padding: 0px; }\n      html .tmap-widget .tmap-topbar select {\n        width: 30%;\n        max-width: 200px;\n        word-wrap: initial;\n        padding: 0px; }\n      html .tmap-widget .tmap-topbar button {\n        line-height: inherit;\n        color: #666666; }\n      html .tmap-widget .tmap-topbar > * {\n        display: inline-block; }\n      html .tmap-widget .tmap-topbar .tmap-separator:after {\n        color: #bdbdbd;\n        margin: 3px;\n        content: \" | \"; }\n      html .tmap-widget .tmap-topbar .tc-edit-add-tag .tc-add-tag-name input {\n        width: 70%; }\n      html .tmap-widget .tmap-topbar .tc-sidebar-header {\n        text-shadow: none; }\n      html .tmap-widget .tmap-topbar .tc-edit-tags {\n        border: none;\n        padding: inherit;\n        box-shadow: none; }\n\nhtml:fullscreen body {\n  overflow: hidden; }\nhtml:fullscreen .tc-dropzone > *:not(.tmap-has-fullscreen-child) {\n  z-index: 0; }\nhtml:fullscreen .tmap-has-fullscreen-child {\n  z-index: 1 !important;\n  left: 0px !important;\n  top: 0 !important;\n  right: 0 !important;\n  bottom: 0 !important;\n  position: fixed !important; }\n  html:fullscreen .tmap-has-fullscreen-child .tmap-widget.tmap-fullscreen {\n    background: white !important;\n    height: 100% !important;\n    width: 100% !important;\n    position: fixed !important;\n    top: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n    left: 0 !important;\n    z-index: 999 !important;\n    border: none !important;\n    margin: 0 !important; }\n\nhtml:-moz-full-screen body {\n  overflow: hidden; }\nhtml:-moz-full-screen .tc-dropzone > *:not(.tmap-has-fullscreen-child) {\n  z-index: 0; }\nhtml:-moz-full-screen .tmap-has-fullscreen-child {\n  z-index: 1 !important;\n  left: 0px !important;\n  top: 0 !important;\n  right: 0 !important;\n  bottom: 0 !important;\n  position: fixed !important; }\n  html:-moz-full-screen .tmap-has-fullscreen-child .tmap-widget.tmap-fullscreen {\n    background: white !important;\n    height: 100% !important;\n    width: 100% !important;\n    position: fixed !important;\n    top: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n    left: 0 !important;\n    z-index: 999 !important;\n    border: none !important;\n    margin: 0 !important; }\n\nhtml:-webkit-full-screen body {\n  overflow: hidden; }\nhtml:-webkit-full-screen .tc-dropzone > *:not(.tmap-has-fullscreen-child) {\n  z-index: 0; }\nhtml:-webkit-full-screen .tmap-has-fullscreen-child {\n  z-index: 1 !important;\n  left: 0px !important;\n  top: 0 !important;\n  right: 0 !important;\n  bottom: 0 !important;\n  position: fixed !important; }\n  html:-webkit-full-screen .tmap-has-fullscreen-child .tmap-widget.tmap-fullscreen {\n    background: white !important;\n    height: 100% !important;\n    width: 100% !important;\n    position: fixed !important;\n    top: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n    left: 0 !important;\n    z-index: 999 !important;\n    border: none !important;\n    margin: 0 !important; }\n\nhtml:-ms-fullscreen body {\n  overflow: hidden; }\nhtml:-ms-fullscreen .tc-dropzone > *:not(.tmap-has-fullscreen-child) {\n  z-index: 0; }\nhtml:-ms-fullscreen .tmap-has-fullscreen-child {\n  z-index: 1 !important;\n  left: 0px !important;\n  top: 0 !important;\n  right: 0 !important;\n  bottom: 0 !important;\n  position: fixed !important; }\n  html:-ms-fullscreen .tmap-has-fullscreen-child .tmap-widget.tmap-fullscreen {\n    background: white !important;\n    height: 100% !important;\n    width: 100% !important;\n    position: fixed !important;\n    top: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n    left: 0 !important;\n    z-index: 999 !important;\n    border: none !important;\n    margin: 0 !important; }\n",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/felixhayashi/tiddlymap/layout",
            "tags": [
                "$:/tags/Stylesheet"
            ]
        },
        "$:/plugins/felixhayashi/tiddlymap/adapter.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/adapter.js\ntype: application/javascript\nmodule-type: library\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){var t=require(\"$:/plugins/felixhayashi/tiddlymap/view_abstraction.js\").ViewAbstraction;var e=require(\"$:/plugins/felixhayashi/tiddlymap/edgetype.js\").EdgeType;var i=require(\"$:/plugins/felixhayashi/vis/vis.js\");var s=require(\"$:/core/modules/macros/contrastcolour.js\").run;var r=function(){this.wiki=$tw.wiki;this.opt=$tw.tmap.opt;this.logger=$tw.tmap.logger;this.utils=$tw.tmap.utils};r.prototype.deleteEdge=function(t){return this._processEdge(t,\"delete\")};r.prototype.deleteEdges=function(t){t=this.utils.convert(t,\"array\");for(var e=0;e<t.length;e++){this.deleteEdge(t[e])}};r.prototype.insertEdge=function(t){return this._processEdge(t,\"insert\")};r.prototype._processEdge=function(t,i){this.logger(\"debug\",\"Edge\",i,t);if(typeof t!==\"object\"||!i||!t.from)return;if(i===\"insert\"&&!t.to)return;var s=$tw.tmap.indeces.tById[t.from];if(!s||!this.utils.tiddlerExists(s))return;var r=new e(t.type);var o=this.utils.getTiddler(s);var a=r.getNamespace();if(a===\"tw-list\"){if(!t.to)return;return this._processListEdge(o,t,r,i)}else if(a===\"tw-field\"){if(!t.to)return;return this._processFieldEdge(o,t,r,i)}else if(a===\"tw-body\"){return null}else{return this._processTmapEdge(o,t,r,i)}return t};r.prototype._processTmapEdge=function(t,e,i,s){if(s===\"delete\"&&!e.id)return;var r=this.utils.parseFieldData(t,this.opt.field.edges,{});if(s===\"insert\"){e.id=e.id||this.utils.genUUID();r[e.id]={to:e.to,type:i.getId()};if(!i.exists()){i.persist()}}else{delete r[e.id]}this.utils.writeFieldData(t,this.opt.field.edges,r);return e};r.prototype._processListEdge=function(t,e,i,s){var r=i.getId(true);var o=this.utils.getTiddler(t);var a=$tw.utils.parseStringArray(t.fields[r]);a=(a||[]).slice();var d=$tw.tmap.indeces.tById[e.to];if(s===\"insert\"){a.push(d);if(!i.exists()){i.persist()}}else{var n=a.indexOf(d);if(n>-1){a.splice(n,1)}}this.utils.setField(o,r,$tw.utils.stringifyList(a));return e};r.prototype._processFieldEdge=function(t,e,i,s){var r=$tw.tmap.indeces.tById[e.to];if(r==null)return;var o=s===\"insert\"?r:\"\";this.utils.setField(t,i.getId(true),o);if(!i.exists()){i.persist()}return e};r.prototype.getAdjacencyList=function(t,e){$tw.tmap.start(\"Creating adjacency list\");e=e||{};if(!e.edges){var i=this.utils.getMatches(this.opt.selector.allPotentialNodes);e.edges=this.getEdgesForSet(i,e.toWL,e.typeWL)}var s=this.utils.groupByProperty(e.edges,t);$tw.tmap.stop(\"Creating adjacency list\");return s};r.prototype.getNeighbours=function(t,e){$tw.tmap.start(\"Get neighbours\");e=e||{};t=t.slice();var i=e.addProperties;var s=this.getAdjacencyList(\"to\",e);var r=this.utils.getDataMap();var o=this.utils.getDataMap();var a=parseInt(e.steps)>0?e.steps:1;var d=function(){var a=this.utils.getArrayValuesAsHashmapKeys(t);for(var d=t.length-1;d>=0;d--){if(this.utils.isSystemOrDraft(t[d]))continue;var n=this.getEdges(t[d],e.toWL,e.typeWL);$tw.utils.extend(r,n);for(var l in n){var p=$tw.tmap.indeces.tById[n[l].to];if(!a[p]&&!o[n[l].to]){var g=this.makeNode(p,i,e.view);if(g){o[n[l].to]=g;t.push(p)}}}var u=s[$tw.tmap.indeces.idByT[t[d]]];if(u){for(var h=0;h<u.length;h++){var f=$tw.tmap.indeces.tById[u[h].from];if(a[f])continue;if(!o[u[h].from]){var g=this.makeNode(f,i,e.view);if(g){o[u[h].from]=g;t.push(f)}}r[u[h].id]=u[h]}}}}.bind(this);for(var n=0;n<a;n++){var l=t.length;d();if(l===t.length)break}var p={nodes:o,edges:r};this.logger(\"debug\",\"Retrieved neighbourhood\",p,\"steps\",n);$tw.tmap.stop(\"Get neighbours\");return p};r.prototype.getGraph=function(e){$tw.tmap.start(\"Assembling Graph\");e=e||{};var i=new t(e.view);var s=this.utils.getMatches(e.filter||i.getNodeFilter(\"compiled\"));var r=this.utils.getArrayValuesAsHashmapKeys(s);var o=this.getEdgeTypeWhiteList(i.getEdgeFilter(\"compiled\"));var a=parseInt(e.neighbourhoodScope||i.getConfig(\"neighbourhood_scope\"));var d={edges:this.getEdgesForSet(s,r,o),nodes:this.selectNodesByReferences(s,{view:i,outputType:\"hashmap\",addProperties:{group:\"matches\"}})};if(a){var n=this.getNeighbours(s,{steps:a,view:i,typeWL:o,addProperties:{group:\"neighbours\"}});this.utils.merge(d,n);if(i.isEnabled(\"show_inter_neighbour_edges\")){var l=this.getTiddlersById(n.nodes);var r=this.utils.getArrayValuesAsHashmapKeys(l);$tw.utils.extend(d.edges,this.getEdgesForSet(l,r))}}$tw.tmap.stop(\"Assembling Graph\");this.logger(\"debug\",\"Assembled graph:\",d);return d};r.prototype.getEdges=function(t,e,i){if(!this.utils.tiddlerExists(t)||this.utils.isSystemOrDraft(t)){return}var s=this.utils.getTiddler(t);var r=this.utils.getTiddlerRef(t);var o=this._getTmapEdges(t,e,i);var a=this.utils.getMatches($tw.tmap.opt.selector.allListEdgeStores);var d=this.utils.getDataMap();d[\"tw-body:link\"]=this.wiki.getTiddlerLinks(r);for(var n=0;n<a.length;n++){d[\"tw-list:\"+a[n]]=$tw.utils.parseStringArray(s.fields[a[n]])}var a=this.utils.getMatches($tw.tmap.opt.selector.allFieldEdgeStores);for(var n=0;n<a.length;n++){d[\"tw-field:\"+a[n]]=[s.fields[a[n]]]}$tw.utils.extend(o,this._getEdgesFromRefArray(r,d,e,i));return o};r.prototype._getEdgesFromRefArray=function(t,i,s,r){var o=this.utils.getDataMap();for(var a in i){var d=i[a];if(!d||r&&!r[a])continue;a=new e(a);for(var n=0;n<d.length;n++){var l=d[n];if(!l||!$tw.wiki.tiddlerExists(l)||this.utils.isSystemOrDraft(l)||s&&!s[l])continue;var p=a.getId()+$tw.utils.hashString(t+l);var g=this.makeEdge(this.getId(t),this.getId(l),a,p);if(g){o[g.id]=g}}}return o};r.prototype._getTmapEdges=function(t,e,i){var s=this.utils.parseFieldData(t,this.opt.field.edges,{});var r=this.utils.getDataMap();for(var o in s){var a=s[o];var d=$tw.tmap.indeces.tById[a.to];if(d&&(!e||e[d])&&(!i||i[a.type])){var n=this.makeEdge(this.getId(t),a.to,a.type,o);if(n){r[o]=n}}}return r};r.prototype.getEdgeTypeWhiteList=function(t){var i=this.utils.getDataMap();var s=this.utils.getMatches(this.opt.selector.allEdgeTypes);var r=t?this.utils.getMatches(t,s):s;for(var o=0;o<r.length;o++){var a=new e(r[o]);i[a.getId()]=a}return i};r.prototype.getEdgesForSet=function(t,e,i){var s=this.utils.getDataMap();for(var r=0;r<t.length;r++){$tw.utils.extend(s,this.getEdges(t[r],e,i))}return s};r.prototype.selectEdgesByType=function(t){var i=this.utils.getDataMap();i[new e(t).getId()]=true;var s=this.utils.getMatches(this.opt.selector.allPotentialNodes);var r=this.getEdgesForSet(s,null,i);return r};r.prototype._processEdgesWithType=function(t,i){t=new e(t);this.logger(\"debug\",\"Processing edges\",t,i);var s=this.selectEdgesByType(t);if(i.action===\"rename\"){var r=new e(i.newName);r.loadDataFromType(t);r.persist()}for(var o in s){this._processEdge(s[o],\"delete\");if(i.action===\"rename\"){s[o].type=i.newName;this._processEdge(s[o],\"insert\")}}$tw.wiki.deleteTiddler(t.getPath())};r.prototype.selectNodesByFilter=function(t,e){var i=this.utils.getMatches(t);return this.selectNodesByReferences(i,e)};r.prototype.selectNodesByReferences=function(t,e){e=e||{};var i=e.addProperties;var s=this.utils.getDataMap();var r=Object.keys(t);for(var o=0;o<r.length;o++){var a=this.makeNode(t[r[o]],i,e.view);if(a){s[a.id]=a}}return this.utils.convert(s,e.outputType)};r.prototype.makeEdge=function(t,i,s,r){if(!t||!i)return;if(t instanceof $tw.Tiddler){t=t.fields[this.opt.field.nodeId]}else if(typeof t===\"object\"){t=t.id}s=new e(s);var o={id:r||this.utils.genUUID(),from:t,to:i,type:s.getId(),title:s.getData(\"description\")};o.label=this.utils.isTrue(s.getData(\"show-label\"),true)?s.getLabel():undefined;o=$tw.utils.extend(o,s.getData(\"style\"));return o};r.prototype.makeNode=function(e,i,r){var o=this.utils.getTiddler(e,true);if(!o||o.isDraft()||this.wiki.isSystemTiddler(o.fields.title)){return}var a=$tw.utils.extendDeepCopy($tw.tmap.opt.config.vis.groups[i&&i.group||\"matches\"]);var d=o.fields[this.opt.field.nodeIcon];if(d){var n=this.utils.getTiddler(d);if(n&&n.fields.text){var l=n.fields.type?n.fields.type:\"image/svg+xml\";var p=n.fields.text;a.shape=\"image\";if(l===\"image/svg+xml\"){p=p.replace(/\\r?\\n|\\r/g,\" \");if(!this.utils.inArray(\"xmlns\",p)){p=p.replace(/<svg/,'<svg xmlns=\"http://www.w3.org/2000/svg\"')}}var g=$tw.config.contentTypeInfo[l].encoding===\"base64\"?p:window.btoa(p);a.image=\"data:\"+l+\";base64,\"+g}}var u=o.fields[this.opt.field.nodeLabel];a.label=u&&this.opt.field.nodeLabel!==\"title\"?this.wiki.renderText(\"text/plain\",\"text/vnd-tiddlywiki\",u):o.fields.title;var h=o.fields[this.opt.field.nodeInfo];a.title=h&&this.opt.field.nodeInfo!==\"text\"?this.wiki.renderText(\"text/html\",\"text/vnd-tiddlywiki\",h):o.fields.title;if(o.fields.color){a.color=o.fields.color;a.font=a.font||{};a.font.color=s(a.color,a.color,\"#000000\",\"#FFFFFF\")}if(typeof i===\"object\"){a=$tw.utils.extend(a,i)}a.id=this.assignId(o);var r=new t(r);if(r.exists()){var f=r.getPositions()[a.id];if(f){$tw.utils.extend(a,f);if(!r.isEnabled(\"physics_mode\")){a.fixed={x:true,y:true}}}}return a};r.prototype.selectNodesByIds=function(t,e){var i=this.getTiddlersById(t);return this.selectNodesByReferences(i,e)};r.prototype.selectNodeById=function(t,e){e=this.utils.merge(e,{outputType:\"hashmap\"});var i=this.selectNodesByIds([t],e);return i[t]};r.prototype.getTiddlersById=function(t){if(Array.isArray(t)){t=this.utils.getArrayValuesAsHashmapKeys(t)}else if(t instanceof i.DataSet){t=this.utils.getLookupTable(t,\"id\")}var e=[];for(var s in t){var r=$tw.tmap.indeces.tById[s];if(r)e.push(r)}return e};r.prototype.getId=function(t){return $tw.tmap.indeces.idByT[this.utils.getTiddlerRef(t)]};r.prototype.deleteNode=function(t){if(!t)return;var e=typeof t===\"object\"?t.id:t;var i=$tw.tmap.indeces.tById[e];if(!this.utils.tiddlerExists(i))return;var s=this.opt.field.nodeId;var r=this.wiki.getTiddlerList(\"$:/StoryList\");var o=r.indexOf(i);if(o!==-1){r.splice(o,1);var a=this.wiki.getTiddler(\"$:/StoryList\");this.utils.setField(a,\"list\",r)}var d=this.getNeighbours([i]);this.deleteEdges(d.edges);this.wiki.deleteTiddler(i)};r.prototype.getView=function(e,i){return new t(e,i)};r.prototype.createView=function(e){if(typeof e!==\"string\"||e===\"\"){e=\"My view\"}var i=this.wiki.generateNewTitle(this.opt.path.views+\"/\"+e);return new t(i,true)};r.prototype.createEdgeType=function(t){return new e(t)};r.prototype.storePositions=function(e,i){i=new t(i);i.setPositions(e)};r.prototype.assignId=function(t,e){var i=this.utils.getTiddler(t,true);if(!i)return;var s=this.opt.field.nodeId;var r=i.fields[s];if(!r||e&&s!==\"title\"){r=this.utils.genUUID();this.utils.setField(i,s,r);this.logger(\"info\",\"Assigning new id to\",i.fields.title)}$tw.tmap.indeces.tById[r]=i.fields.title;$tw.tmap.indeces.idByT[i.fields.title]=r;return r};r.prototype.getCollectionFilter=function(t){var e=this.getGraph({view:t});var i=Object.keys(this.utils.getLookupTable(e.nodes,\"id\"));return this.utils.joinAndWrap(i,\"[field:\"+this.opt.field.nodeId+\"[\",\"]]\")};r.prototype.insertNode=function(e,i){if(!i||typeof i!==\"object\")i={};if(!e||typeof e!==\"object\"){e=this.utils.getDataMap()}var s=this.utils.getDataMap();s.title=this.wiki.generateNewTitle(e.label?e.label:\"New node\");e.label=s.title;if(this.opt.field.nodeId===\"title\"){e.id=s.title}else{e.id=this.utils.genUUID();s[this.opt.field.nodeId]=e.id}if(i.view){var r=new t(i.view);r.addNodeToView(e)}this.wiki.addTiddler(new $tw.Tiddler(s,this.wiki.getModificationFields(),this.wiki.getCreationFields()));return e};exports.Adapter=r})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/adapter.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/callback_manager.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/callback_manager.js\ntype: application/javascript\nmodule-type: library\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";var e=require(\"$:/plugins/felixhayashi/tiddlymap/utils.js\").utils;var t=function(){this.wiki=$tw.wiki;this.logger=$tw.tmap.logger;this.callbacks=e.getDataMap()};t.prototype.add=function(e,t,i){this.logger(\"debug\",'A callback was registered for changes of \"'+e+'\"');this.callbacks[e]={execute:t,isDeleteOnCall:typeof i===\"boolean\"?i:true}};t.prototype.remove=function(e){if(!e)return;if(typeof e===\"string\"){e=[e]}for(var t=0;t<e.length;t++){var i=e[t];if(this.callbacks[i]){this.logger(\"debug\",'A callback for \"'+i+'\" will be deleted');delete this.callbacks[i]}}};t.prototype.handleChanges=function(e){if(this.callbacks.length==0){this.logger(\"debug\",\"No registered callbacks exist at the moment\");return}for(var t in e){if(!this.callbacks[t])continue;if(this.wiki.getTiddler(t)){this.logger(\"debug\",'A callback for \"'+t+'\" will be executed');this.callbacks[t].execute(t);if(!this.callbacks.isDeleteOnCall)continue}this.remove(t)}};exports.CallbackManager=t})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/callback_manager.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/defaults.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/defaults.js\ntype: application/javascript\nmodule-type: library\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){var i={path:{pluginRoot:\"$:/plugins/felixhayashi/tiddlymap\",edgeTypes:\"$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes\",views:\"$:/plugins/felixhayashi/tiddlymap/graph/views\",options:\"$:/plugins/felixhayashi/tiddlymap/config\",tempRoot:\"$:/temp/felixhayashi/tiddlymap\",localHolders:\"$:/temp/felixhayashi/tiddlymap/holders\",dialogs:\"$:/plugins/felixhayashi/tiddlymap/dialog\"},ref:{dialogStandardFooter:\"$:/plugins/felixhayashi/tiddlymap/dialog/standardFooter\",defaultGraphViewHolder:\"$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder\",graphBar:\"$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar\",sysConf:\"$:/plugins/felixhayashi/tiddlymap/config/sys\",sysUserConf:\"$:/plugins/felixhayashi/tiddlymap/config/sys/user\",visConf:\"$:/plugins/felixhayashi/tiddlymap/config/vis\",visUserConf:\"$:/plugins/felixhayashi/tiddlymap/config/vis/user\",welcomeFlag:\"$:/plugins/felixhayashi/tiddlymap/flag/welcome\",focusButton:\"$:/plugins/felixhayashi/tiddlymap/misc/focusButton\",sysMeta:\"$:/plugins/felixhayashi/tiddlymap/misc/meta\"},config:{sys:{field:{nodeId:\"tmap.id\",nodeLabel:\"caption\",nodeIcon:\"icon\",nodeInfo:\"description\",viewMarker:\"isview\",edgeTypeMarker:\"isview\",edges:\"tmap.edges\"},suppressedDialogs:{},debug:\"false\",notifications:\"true\",editNodeOnCreate:\"false\",singleClickMode:\"false\"}},misc:{unknownEdgeLabel:\"__noname__\",cssPrefix:\"tmap-\",sysEdgeTypeNS:\"tmap\"}};exports.defaults=i})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/defaults.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog_manager.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/dialog_manager.js\ntype: application/javascript\nmodule-type: library\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";var t=require(\"$:/plugins/felixhayashi/tiddlymap/utils.js\").utils;var e=require(\"$:/plugins/felixhayashi/tiddlymap/callback_manager.js\").CallbackManager;var i=function(t,e){this.wiki=$tw.wiki;this.logger=$tw.tmap.logger;this.adapter=$tw.tmap.adapter;this.opt=$tw.tmap.opt;this.callbackManager=t;if(e){this.context=e}};i.prototype.open=function(e,i,a){if(t.isTrue(this.opt.config.sys.suppressedDialogs[e],false)){this.logger(\"warning\",\"Suppressed dialog\",e);return}i=i||{};this.logger(\"debug\",\"Dialog param object\",i);if(typeof a===\"function\"&&this.context){a=a.bind(this.context)}var r=this.opt.path.tempRoot+\"/dialog-\"+t.genUUID();var l=t.getTiddler(this.opt.path.dialogs+\"/\"+e);var s={title:r,buttons:l.fields[\"buttons\"]||\"ok_cancel\",output:r+\"/output\",result:r+\"/result\",temp:r+\"/temp\",templateId:e,currentTiddler:r+\"/output\"};if(i.dialog){if(i.dialog.preselects){this.wiki.addTiddler(new $tw.Tiddler({title:s.output},i.dialog.preselects));delete i.dialog.preselects}t.merge(s,i.dialog)}s.footer=t.getText(this.opt.path.footers);s=t.flatten(s);i=t.flatten(i);this.callbackManager.add(s.result,function(e){this.getElement(\"hidden-close-button\").click();var i=this.wiki.getTiddler(e);var l=i.fields.text;if(l){var n=this.wiki.getTiddler(s.output)}else{var n=null;$tw.tmap.notify(\"operation cancelled\")}if(typeof a===\"function\"){a(l,n)}var o=t.getMatches(\"[prefix[\"+r+\"]]\");t.deleteTiddlers(o)}.bind(this),true);var n=new $tw.Tiddler(l,i,s);this.wiki.addTiddler(n);this.logger(\"debug\",\"Opening dialog\",n);$tw.rootWidget.dispatchEvent({type:\"tm-modal\",param:n.fields.title,paramObject:n.fields});this.addKeyBindings();return n};i.prototype.getElement=function(e){return t.getFirstElementByClassName(\"tmap-\"+e)};i.prototype.addKeyBindings=function(){var e=$tw.tmap.keycharm({container:t.getFirstElementByClassName(\"tc-modal\")});var i=/tmap-triggers-(.+?)-on-(.+?)(?:\\s|$)/;var a=document.getElementsByClassName(\"tmap-trigger-field\");for(var r=0;r<a.length;r++){var l=a[r].className.split(\" \");for(var s=0;s<l.length;s++){var n=l[s].match(i);if(!n){continue}var o=n[1];var d=n[2];var p=this.getElement(o);if(!p)continue;e.bind(d,function(){this.click()}.bind(p))}}};exports.DialogManager=i})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog_manager.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/edgetype.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/edgetype.js\ntype: application/javascript\nmodule-type: library\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){var t=function(i){if(i instanceof t){return i}if(!i){i=\"tmap:unknown\"}else if(typeof i!==\"string\"){throw\"Cannot create edge-type\"}this.createShortcuts();this.data=this.utils.getDataMap();this.whitelist=[\"description\",\"style\",\"label\",\"modified\",\"created\",\"show-label\"];this.id=this.utils.getWithoutPrefix(i,this.opt.path.edgeTypes+\"/\");this.loadDataFromType(this.id)};t.prototype.createShortcuts=function(){this.wiki=$tw.wiki;this.opt=$tw.tmap.opt;this.logger=$tw.tmap.logger;this.utils=$tw.tmap.utils};t.prototype.getPath=function(){return this.opt.path.edgeTypes+\"/\"+this.id};t.prototype.exists=function(){return this.utils.tiddlerExists(this.getPath())};t.prototype.getLabel=function(){return this.data.label||this.getId(true)};t.prototype.getNamespace=function(){var t=this.id.match(\"^(.*):\");return t?t[1]:\"\"};t.prototype.getId=function(t){return t?this.id.substring(this.id.indexOf(\":\")+1):this.id};t.prototype.getData=function(t){if(t===\"label\"){return this.getLabel()}return t?this.data[t]:this.data};t.prototype.setData=function(){var t=arguments;if(t.length===2){if(typeof t[0]===\"string\"){if(t[1]&&this.utils.inArray(t[0],this.whitelist)){if(t[0]===\"style\"){this.setStyle(t[1])}else{this.data[t[0]]=t[1]}}else{delete this.data[t[0]]}}}else if(t.length===1&&typeof t[0]===\"object\"){for(var i in t[0]){this.setData(i,t[0][i])}}};t.prototype.setStyle=function(t,i){if(typeof t===\"string\"){t=this.utils.parseJSON(t)}if(typeof t===\"object\"){if(i){this.utils.merge(this.data.style,t)}else{this.data.style=t}}};t.prototype.persist=function(t,i){if(!t){t=this.getPath()}if(typeof t===\"string\"){var e={title:t};if(!this.utils.startsWith(t,this.opt.path.edgeTypes)){e.id=this.id}else{$tw.utils.extend(e,this.wiki.getModificationFields());if(!this.exists()){$tw.utils.extend(e,this.wiki.getCreationFields())}}var s=i?$tw.config.preferences.jsonSpaces:null;this.data.style=JSON.stringify(this.data.style,null,s);$tw.wiki.addTiddler(new $tw.Tiddler(this.data,e))}};t.prototype.loadDataFromType=function(i){if(i instanceof t){this.setData(i.getData())}else{if(i instanceof $tw.Tiddler){i=i.fields.title}if(typeof i===\"string\"){if(!this.utils.startsWith(i,this.opt.path.edgeTypes)){i=this.opt.path.edgeTypes+\"/\"+i}this.loadDataFromTiddler(this.wiki.getTiddler(i),false)}}};t.prototype.isShipped=function(){return $tw.wiki.getSubTiddler(this.opt.path.pluginRoot,this.getPath())};t.prototype.loadDataFromTiddler=function(t){var i=this.utils.getTiddler(t);if(i){var e=$tw.wiki.getSubTiddler(this.opt.path.pluginRoot,this.getPath())||{};var s=$tw.utils.extend({},e.fields,i.fields);this.setData(s)}};exports.EdgeType=t})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/edgetype.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/exception.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/exception.js\ntype: application/javascript\nmodule-type: library\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){Exception={};Exception.EnvironmentError=function(n){this.name=\"EnvironmentError\";this.message=\"Critical parts of the underlying system changed: \"+n};Exception.DependencyError=function(n){this.name=\"DependencyError\";this.message=\"TiddlyMap cannot run without: \"+n};for(var n in Exception){Exception[n].prototype=Object.create(Error.prototype);Exception[n].constructor=Exception[n]}exports.Exception=Exception})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/exception.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/utils.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/utils.js\ntype: application/javascript\nmodule-type: library\n\nATTENTION: THIS CLASS MUST NOT REQUIRE ANY OTHER TIDDLYMAP FILE\nIN ORDER TO AVOID ACYCLIC DEPENDENCIES!\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){var e=require(\"$:/plugins/felixhayashi/vis/vis.js\");var t=require(\"$:/plugins/felixhayashi/tiddlymap/exception.js\").Exception;var r={};r.deleteTiddlers=function(e){var t=Object.keys(e);for(var n=0;n<t.length;n++){if(r.tiddlerExists(e[t[n]])){var i=r.getTiddlerRef(e[t[n]]);$tw.wiki.deleteTiddler(i)}}};r.moveFieldValues=function(e,t,n,i){var l=$tw.wiki.allTitles();for(var a=0;a<l.length;a++){var f=r.getTiddler(l[a]);if(f.isDraft()||!f.fields[e]||!i&&$tw.wiki.isSystemTiddler(l[a])){continue}var u={};u[t]=f.fields[e];if(n){u[e]=undefined}$tw.wiki.addTiddler(new $tw.Tiddler(f,u))}};r.getTiddlerIds=function(e,t){var n=[];var i=Object.keys(e);for(var l=0;l<i.length;l++){if(r.tiddlerExists(e[i[l]])){var a=r.getTiddler(e[i[l]]).fields[t];n.push(a)}}return n};r.getLabel=function(e,t){var n=r.getTiddler(e);return n&&n.fields[t]?n.fields[t]:n.fields.title};r.convert=function(t,n){if(typeof t!==\"object\")return;switch(n){case\"array\":return r.getValues(t);case\"hashmap\":case\"object\":if(t instanceof e.DataSet){return e.get({returnType:\"Object\"})}else{return t}case\"dataset\":default:if(t instanceof e.DataSet){return t}if(!Array.isArray(t)){t=r.getValues(t)}return new e.DataSet(t)}};r.inject=function(t,n){if(n instanceof e.DataSet){n.update(r.convert(t,\"array\"))}else if(Array.isArray(n)){t=r.convert(t,\"object\");for(var i in t){if(!r.inArray(t[i],n)){n.push(t[i])}}}else{$tw.utils.extend(n,r.convert(t,\"object\"))}return n};r.getValues=function(t){if(Array.isArray(t)){return t}if(t instanceof e.DataSet){return t.get({returnType:\"Array\"})}var r=[];var n=Object.keys(t);for(var i=0;i<n.length;i++){r.push(t[n[i]])}return r};r.hasOwnProp=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};r.getDataMap=function(){var e=Object.create(null);Object.defineProperty(e,\"hasOwnProperty\",{enumerable:false,configurable:false,writable:false,value:Object.prototype.hasOwnProperty.bind(e)});return e};r.getMatches=function(e,t,n){var i=undefined;if(t!==null&&typeof t===\"object\"){var l=Object.keys(t);i=function(e){for(var n=0;n<l.length;n++){var i=r.getTiddler(t[l[n]]);if(i){e(i,i.fields.title)}}}}if(typeof e===\"string\"){e=$tw.wiki.compileFilter(e)}var a=e.call($tw.wiki,i);if(n){var f=r.getDataMap();for(var u=0;u<a.length;u++){f[a[u]]=$tw.wiki.getTiddler(a[u])}return f}else{return a}};r.isMatch=function(e,t){var n=r.getTiddlerRef(e);return r.getMatches(t,[n]).length>0};r.isInteger=Number.isInteger||function(e){return typeof e===\"number\"&&isFinite(e)&&Math.floor(e)===e};r.escapeRegex=function(e){return e.replace(/[-$^?.+*[\\]\\\\(){}|]/g,\"\\\\$&\")};r.isTrue=function(e,t){if(e==null){return t}else if(typeof e===\"string\"){var r=parseInt(e);return isNaN(r)?e===\"true\":r!==0;if(e===\"1\"||this.data[conf]===\"true\");}else if(typeof e===\"boolean\"){return e}else if(typeof e===\"number\"){return r!==0}return false};r.getTiddlerRef=function(e){if(e instanceof $tw.Tiddler){return e.fields.title}else if(typeof e===\"string\"){return e}};r.getTiddler=function(e,t){if(e instanceof $tw.Tiddler){if(!t){return e}e=e.fields.title}return $tw.wiki.getTiddler(e)};r.getBasename=function(e){return e.substring(e.lastIndexOf(\"/\")+1)};r.notify=function(e){var t=\"$:/temp/tiddlymap/notify\";$tw.wiki.addTiddler(new $tw.Tiddler({title:t,text:e}));$tw.notifier.display(t)};r.tiddlerExists=function(e){var t=r.getTiddlerRef(e);return t&&($tw.wiki.tiddlerExists(t)||$tw.wiki.isShadowTiddler(t))};r.addListeners=function(e,t,r){for(var n in e){t.addEventListener(n,e[n].bind(r))}};r.isPreviewed=function(e){if(e){if(e.getVariable(\"tv-tiddler-preview\")){return true}else{var t=\"tc-tiddler-preview-preview\";return!!r.getAncestorWithClass(e.parentDomNode,t)}}return false};r.getAncestorWithClass=function(e,t){if(typeof e!==\"object\"||typeof t!==\"string\")return;while(e.parentNode){e=e.parentNode;if($tw.utils.hasClass(e,t)){return e}}};r.getPropertiesByPrefix=function(e,t,n){var i=r.getDataMap();for(var l in e){if(r.startsWith(l,t)){i[n?l.substr(t.length):l]=e[l]}}return i};r.getWithoutPrefix=function(e,t){return r.startsWith(e,t)?e.substr(t.length):e};r.startsWith=function(e,t){return typeof e===\"string\"&&e.indexOf(t)===0};r.hasElements=function(e){return Object.keys(e).length>0};r.groupByProperty=function(e,t){e=r.getIterableCollection(e);var n=r.getDataMap();var i=Object.keys(e);for(var l in i){var a=e[i[l]];var f=a[t];if(f==null){throw\"Cannot group by property \"+t}else{if(!Array.isArray(n[f])){n[f]=[]}n[f].push(a)}}return n};r.findAndRemoveClassNames=function(e){for(var t=0;t<e.length;t++){var r=document.getElementsByClassName(e[t]);for(var n=0;n<r.length;n++){$tw.utils.removeClass(r[n],e[t])}}};r.parseFieldData=function(e,t,n){var i=r.getTiddler(e);if(!i)return n;if(!t)t=\"text\";return r.parseJSON(i.fields[t],n)};r.parseJSON=function(e,t){try{return JSON.parse(e)}catch(r){return t}};r.writeFieldData=function(e,t,n){if(typeof n===\"object\"){r.setField(e,t,JSON.stringify(n))}};r.getPrettyFilter=function(e){e=e.trim().replace(\"][\",\"] [\");var t=/[\\+\\-]?\\[.+?[\\]\\}\\>]\\]/g;var r=e.match(t);e=e.replace(t,\" [] \").trim();var n=e.split(/\\s+/);var i=0;var l=[];for(var a=0;a<n.length;a++){l[a]=n[a]===\"[]\"?r[i++]:n[a]}return l.join(\"\\n\")};r.setField=function(e,t,n){if(e&&t){var i={title:r.getTiddlerRef(e)};i[t]=n;var l=r.getTiddler(e,true);$tw.wiki.addTiddler(new $tw.Tiddler(l,i))}};r.setEntry=function(e,t,n){$tw.wiki.setText(r.getTiddlerRef(e),null,t,n)};r.getEntry=function(e,t,n){var i=$tw.wiki.getTiddlerData(r.getTiddlerRef(e),{});return i[t]==null?n:i[t]};r.getField=function(e,t,n){var i=r.getTiddler(e);return i?i.fields[t]:n?n:\"\"};r.getText=function(e,t){return r.getField(e,\"text\",t)};r.getFirstElementByClassName=function(e,t,n){var i=(t||document).getElementsByClassName(e)[0];if(!i&&n!==false){var l=\"Missing element with class \"+e+\" inside \"+t;throw new r.Exception.EnvironmentError(l)}return i};r.isDraft=function(e){return r.getTiddler(e)&&r.getTiddler(e).isDraft()};r.merge=function(e,t){var r=function(e,t){if(typeof e!==\"object\"){e={}}for(var n in t){if(t.hasOwnProperty(n)){if(t[n]!=null){e[n]=typeof t[n]===\"object\"?r(e[n],t[n]):t[n]}}}return e};return r(e,t)};r.drawRaster=function(e,t,r,n,i){var n=parseInt(n)||10;var l=e.canvas;var a=l.width/t;var f=l.width/t;var u=r.x-a/2;var s=r.y-f/2;for(var o=u;o<a;o+=n){e.moveTo(o,s);e.lineTo(o,f)}for(var d=s;d<f;d+=n){e.moveTo(u,d);e.lineTo(a,d)}e.strokeStyle=i||\"#D9D9D9\";e.stroke()};r.isSystemOrDraft=function(e){if($tw.wiki.isSystemTiddler(r.getTiddlerRef(e))){return true}else{var t=r.getTiddler(e);return t&&t.isDraft()}};r.inArray=function(e,t){return t.indexOf(e)!==-1};r.hasSubString=function(e,t){return e.indexOf(t)!==-1};r.joinAndWrap=function(e,t,r,n){if(!n)n=\" \";return t+e.join(r+n+t)+r};r.keysOfItemsWithProperty=function(e,t,n,i){e=r.getIterableCollection(e);var l=Object.keys(e);var a=[];var i=typeof i===\"number\"?i:l.length;for(var f=0;f<l.length;f++){var u=l[f];if(typeof e[u]===\"object\"&&e[u][t]){if(!n||e[u][t]===n){a.push(u);if(a.length===i){break}}}}return a};r.keyOfItemWithProperty=function(e,t,n){var i=r.keysOfItemsWithProperty(e,t,n,1);return i.length?i[0]:undefined};r.deleteByPrefix=function(e){r.deleteTiddlers(r.getByPrefix(e))};r.getByPrefix=function(e){return r.getMatches(\"[prefix[\"+e+\"]]\")};r.getIterableCollection=function(t){return t instanceof e.DataSet?t.get():t};r.getLookupTable=function(e,t){e=r.getIterableCollection(e);var n=r.getDataMap();var i=Object.keys(e);for(var l=0;l<i.length;l++){var a=i[l];var f=t?e[a][t]:e[a];if(typeof f===\"string\"&&f!=\"\"||typeof f===\"number\"){if(!n[f]){n[f]=e[a];continue}}throw'TiddlyMap: Cannot use \"'+f+'\" as lookup table index'}return n};r.getArrayValuesAsHashmapKeys=function(e){return r.getLookupTable(e)};r.getTiddlersWithField=function(e,t,n){if(!n||typeof n!==\"object\")n={};var i=n.tiddlers||$tw.wiki.allTitles();var l=n.limit||0;var a=n.isIncludeDrafts===true;var f=r.getDataMap();var u=Object.keys(i);for(var s=0;s<u.length;s++){var o=r.getTiddler(i[u[s]]);if(o.hasField(e)&&(!o.isDraft()||a)){if(!t||o.fields[e]===t){f[o.fields.title]=o;if(--l===0)break}}}return f};r.Exception=t;r.makeDraftTiddler=function(e){var t=$tw.wiki.findDraft(e);if(t){return $tw.wiki.getTiddler(t)}var n=$tw.wiki.getTiddler(e);t=r.generateDraftTitle(e);var i=new $tw.Tiddler(n,{title:t,\"draft.title\":e,\"draft.of\":e},$tw.wiki.getModificationFields());$tw.wiki.addTiddler(i);return i};r.generateDraftTitle=function(e){var t=0,r;do{r=\"Draft \"+(t?t+1+\" \":\"\")+\"of '\"+e+\"'\";t++}while($tw.wiki.tiddlerExists(r));return r};r.getFullScreenApis=function(){var e=document,t=e.body,r={_requestFullscreen:t.webkitRequestFullscreen!==undefined?\"webkitRequestFullscreen\":t.mozRequestFullScreen!==undefined?\"mozRequestFullScreen\":t.msRequestFullscreen!==undefined?\"msRequestFullscreen\":t.requestFullscreen!==undefined?\"requestFullscreen\":\"\",_exitFullscreen:e.webkitExitFullscreen!==undefined?\"webkitExitFullscreen\":e.mozCancelFullScreen!==undefined?\"mozCancelFullScreen\":e.msExitFullscreen!==undefined?\"msExitFullscreen\":e.exitFullscreen!==undefined?\"exitFullscreen\":\"\",_fullscreenElement:e.webkitFullscreenElement!==undefined?\"webkitFullscreenElement\":e.mozFullScreenElement!==undefined?\"mozFullScreenElement\":e.msFullscreenElement!==undefined?\"msFullscreenElement\":e.fullscreenElement!==undefined?\"fullscreenElement\":\"\",_fullscreenChange:e.webkitFullscreenElement!==undefined?\"webkitfullscreenchange\":e.mozFullScreenElement!==undefined?\"mozfullscreenchange\":e.msFullscreenElement!==undefined?\"MSFullscreenChange\":e.fullscreenElement!==undefined?\"fullscreenchange\":\"\"};if(!r._requestFullscreen||!r._exitFullscreen||!r._fullscreenElement){return null}else{return r}};r.flatten=function(e,t){t=t||{};var r=t.delimiter||\".\";var n=t.prefix||\"\";var i={};function l(e,a){Object.keys(e).forEach(function(f){var u=e[f];var s=t.safe&&Array.isArray(u);var o=Object.prototype.toString.call(u);var d=o===\"[object Object]\"||o===\"[object Array]\";var c=a?a+r+f:n+f;if(!s&&d){return l(u,c)}i[c]=u})}l(e);return i};r.unflatten=function(e,t){t=t||{};var n=t.delimiter||\".\";var i={};if(Object.prototype.toString.call(e)!==\"[object Object]\"){return e}function l(e){var t=Number(e);return isNaN(t)||e.indexOf(\".\")!==-1?e:t}Object.keys(e).forEach(function(a){var f=a.split(n);var u=l(f.shift());var s=l(f[0]);var o=i;while(s!==undefined){if(o[u]===undefined){o[u]=typeof s===\"number\"&&!t.object?[]:{}}o=o[u];if(f.length>0){u=l(f.shift());s=l(f[0])}}o[u]=r.unflatten(e[a],t)});return i};r.genUUID=function(){var e=\"0123456789abcdefghijklmnopqrstuvwxyz\".split(\"\");return function(){var t=e,r=new Array(36);var n=0,i;for(var l=0;l<36;l++){if(l==8||l==13||l==18||l==23){r[l]=\"-\"}else if(l==14){r[l]=\"4\"}else{if(n<=2)n=33554432+Math.random()*16777216|0;i=n&15;n=n>>4;r[l]=t[l==19?i&3|8:i]}}return r.join(\"\")}}();exports.utils=r})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/utils.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/view_abstraction.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/view_abstraction.js\ntype: application/javascript\nmodule-type: library\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){var t=require(\"$:/plugins/felixhayashi/tiddlymap/edgetype.js\").EdgeType;var i=function(t,e){this.createShortcuts();if(t instanceof i){return t}this.path=this.utils.getDataMap();this.path.config=this._getConfigPath(t);if(e){this._createView()}else if(!this.exists()){return}this.path.map=this.path.config+\"/map\";this.path.nodeFilter=this.path.config+\"/filter/nodes\";this.path.edgeFilter=this.path.config+\"/filter/edges\";this.path.visConfig=this.path.config+\"/vis\";this._ignoreOnNextRebuild=this.utils.getDataMap();this.rebuildCache(this.utils.getValues(this.path))};i.prototype.createShortcuts=function(){this.wiki=$tw.wiki;this.opt=$tw.tmap.opt;this.logger=$tw.tmap.logger;this.utils=$tw.tmap.utils};i.prototype._getConfigPath=function(t){if(t instanceof $tw.Tiddler){return t.fields.title}if(typeof t==\"string\"){t=this.utils.getWithoutPrefix(t,this.opt.path.views+\"/\");if(!this.utils.hasSubString(t,\"/\")){return this.opt.path.views+\"/\"+t}}};i.prototype.getPaths=function(){return this.path};i.prototype._createView=function(){if(this.exists()){this.destroy()}var t={};t.title=this.path.config;t[this.opt.field.viewMarker]=true;t.id=this.utils.genUUID();this.wiki.addTiddler(new $tw.Tiddler(t))};i.prototype.isLocked=function(){return this.wiki.isShadowTiddler(this.path.config)};i.prototype.refresh=function(t){return this.rebuildCache(Object.keys(t))};i.prototype.rebuildCache=function(t,i){if(!this.exists())return[];if(this.utils.inArray(this.path.config,t)){this.logger(\"debug\",\"Reloading config of view\",this.getLabel(),\"; trigger full rebuild\");t=this.utils.getValues(this.path)}var e=this._ignoreOnNextRebuild;this._ignoreOnNextRebuild=this.utils.getDataMap();var s=[];for(var r=0;r<t.length;r++){var o=t[r];if(!i&&e[o]){continue}else if(o===this.path.config){this.config=this.getConfig(null,true)}else if(o===this.path.map){this.positions=this.getPositions(true)}else if(o===this.path.nodeFilter){this.nodeFilter=this.getNodeFilter(null,true)}else if(o===this.path.edgeFilter){this.edgeFilter=this.getEdgeFilter(null,true)}else{continue}s.push(o)}return s};i.prototype.exists=function(){return this.utils.tiddlerExists(this.path.config)};i.prototype.getRoot=function(){return this.path.config};i.prototype.getCreationDate=function(t){if(!this.exists())return;var i=this.wiki.getTiddler(this.path.config).fields[\"created\"];if(t){return i instanceof Date?$tw.utils.formatDateString(i,\"DDth MMM YYYY\"):\"\"}return i};i.prototype.getLabel=function(){if(!this.exists())return;return this.utils.getBasename(this.path.config)};i.prototype.destroy=function(){if(!this.exists())return;var t=\"[prefix[\"+this.getRoot()+\"]]\";this.utils.deleteTiddlers(this.utils.getMatches(t));this.path=this.utils.getDataMap()};i.prototype.getReferences=function(){var t=\"[regexp:text[<\\\\$tiddlymap.*?view=.\"+this.getLabel()+\"..*?>]]\";return this.utils.getMatches(t)};i.prototype.rename=function(t){if(!this.exists()||typeof t!==\"string\"){return}if(this.utils.inArray(\"/\",t)){$tw.tmap.notify('A view name must not contain any \"/\"');return}var i=this.getLabel();if(i===t){return}for(index in this.path){var e=this.wiki.getTiddler(this.path[index]);if(!e)continue;this.path[index]=this.path[index].replace(i,t);this.wiki.addTiddler(new $tw.Tiddler(e,{title:this.path[index]}));this.wiki.deleteTiddler(e.fields.title)}this.rebuildCache(this.utils.getValues(this.path),true)};i.prototype.isEnabled=function(t){return this.utils.isTrue(this.getConfig(t),false)};i.prototype.getConfig=function(t,i,e){if(!this.exists()){var s=this.utils.getDataMap()}else if(!i&&this.config){var s=this.config}else{var r=this.wiki.getTiddler(this.path.config).fields;var s=this.utils.getPropertiesByPrefix(r,\"config.\");defaults={\"config.layout.active\":\"user\"};$tw.utils.extend(defaults,s)}return t?s[this.utils.startsWith(t,\"config.\")?t:\"config.\"+t]:s};i.prototype.getStabilizationIterations=function(){return this.stabIterations?this.stabIterations:1e3};i.prototype.getVisConfig=function(){var t=this.utils.parseFieldData(this.path.visConfig,\"text\",{});return this.utils.merge($tw.utils.extendDeepCopy(this.opt.config.vis),t)};i.prototype.setStabilizationIterations=function(t){};i.prototype.getHierarchyEdgeTypes=function(){if(this.getConfig(\"layout.active\")!==\"hierarchical\")return[];var t=this.utils.getPropertiesByPrefix(this.getConfig(),\"config.layout.hierarchical.order-by-\",true);var i=this.utils.getDataMap();for(var e in t){if(t[e]===\"true\"){var s=this.utils.getTiddler($tw.tmap.indeces.tById[e]);if(s){i[this.utils.getBasename(s.fields.title)]=true}}}return i};i.prototype.setConfig=function(){if(arguments[0]==null)return;if(arguments.length===1&&typeof arguments[0]===\"object\"){for(var t in arguments[0]){this.setConfig(t,arguments[0][t])}}else if(arguments.length===2&&typeof arguments[0]===\"string\"){var t=this.utils.getWithoutPrefix(arguments[0],\"config.\");var i=arguments[1];if(i===undefined){return}if(i===null){this.logger(\"debug\",\"Removing config\",t);delete this.config[\"config.\"+t]}else{if(t===\"edge_type_namespace\"&&typeof i===\"string\"&&i.length){i=i.replace(/([^:])$/,\"$1:\")}}this.logger(\"log\",\"Setting config\",t,i);this.config[\"config.\"+t]=i}else{return}this.wiki.addTiddler(new $tw.Tiddler(this.wiki.getTiddler(this.path.config),this.config));this._ignoreOnNextRebuild[this.path.config]=true};i.prototype.isExplicitNode=function(t){var i=this.utils.escapeRegex(this._getAddNodeFilterPart(t));return this.getNodeFilter(\"expression\").match(i)};i.prototype.isLiveView=function(t){return this.getLabel()===this.opt.misc.liveViewLabel};i.prototype.removeNodeFromFilter=function(t){if(!this.isExplicitNode(t))return false;var i=this.getNodeFilter(\"expression\");var e=i.replace(this._getAddNodeFilterPart(t),\"\");this.setNodeFilter(e);return true};i.prototype._getAddNodeFilterPart=function(t){return\"[field:\"+this.opt.field.nodeId+\"[\"+t.id+\"]]\"};i.prototype.setNodeFilter=function(t,i){if(!this.exists())return;t=t.replace(/[\\n\\r]/g,\" \");if(this.getNodeFilter.expression===t){return}if(this.isLiveView()&&!i){$tw.tmap.notify(\"It is forbidden to change the node filter of the live view!\");return}this.utils.setField(this.path.nodeFilter,\"filter\",t);this.logger(\"debug\",\"Node filter set to\",t);this.nodeFilter=this.getNodeFilter(null,true);this._ignoreOnNextRebuild[this.path.nodeFilter]=true};i.prototype.setEdgeFilter=function(t){if(!this.exists())return;t=t.replace(/[\\n\\r]/g,\" \");if(this.getEdgeFilter.expression===t){return}this.utils.setField(this.path.edgeFilter,\"filter\",t);this.logger(\"debug\",\"Edge filter set to\",t,this.path.edgeFilter);this.edgeFilter=this.getEdgeFilter(null,true);this._ignoreOnNextRebuild[this.path.edgeFilter]=true};i.prototype.appendToNodeFilter=function(t){var t=this.getNodeFilter(\"expression\")+\" \"+t;this.setNodeFilter(t)};i.prototype.addNodeToView=function(t){this.appendToNodeFilter(this._getAddNodeFilterPart(t));this.setNodePosition(t)};i.prototype.getEdgeFilter=function(t,i){if(!i&&this.edgeFilter){var e=this.edgeFilter}else{var e=this.utils.getDataMap();var s=this.wiki.getTiddler(this.path.edgeFilter);e.expression=s&&s.fields.filter?s.fields.filter:this.opt.filter.defaultEdgeFilter;e.compiled=this.wiki.compileFilter(e.expression)}return t?e[t]:e};i.prototype.getNodeFilter=function(t,i){if(!i&&this.nodeFilter){var e=this.nodeFilter}else{var e=this.utils.getDataMap();var s=this.wiki.getTiddler(this.path.nodeFilter);e.expression=s&&s.fields.filter?s.fields.filter:\"\";e.compiled=this.wiki.compileFilter(e.expression)}return t?e[t]:e};i.prototype.getPositions=function(t){if(!this.isLiveView()&&!t&&this.positions){return this.positions}var i=this.utils.parseFieldData(this.getPositionStore(),\"text\",{});this.logger(\"debug\",\"Loading positions\",i,\"from\",this.getPositionStore());return i};i.prototype.setPositions=function(t){if(!this.exists()||typeof t!==\"object\")return;$tw.tmap.logger(\"log\",\"Storing positions in\",this.getPositionStore());this.utils.writeFieldData(this.getPositionStore(),\"text\",t);this.positions=t;this._ignoreOnNextRebuild[this.path.map]=true};i.prototype.getPositionStore=function(){if(this.isLiveView()){var t=this.utils.getMatches(this.getNodeFilter(\"compiled\"))[0];if(t){return this.path.map+\"/\"+$tw.tmap.indeces.idByT[t]}}return this.path.map};i.prototype.setNodePosition=function(t){if(t&&t.x&&t.y){var i=this.getPositions();i[t.id]={x:t.x,y:t.y};this.setPositions(i)}};exports.ViewAbstraction=i})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/view_abstraction.js",
            "type": "application/javascript",
            "module-type": "library"
        },
        "$:/plugins/felixhayashi/tiddlymap/tmap.js": {
            "text": "/*\\\ntitle: $:/plugins/felixhayashi/tiddlymap/tmap.js\ntype: application/javascript\nmodule-type: macro\n\nIn connection with tiddlymap, this macro allows us to access\nsystem information from within tiddlers as well as to execute some\nutil functions.\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";exports.name=\"tmap\";exports.params=function(r){var t=[];for(var e=0;e<r;e++){t.push({name:\"arg\"+e})}return t}(5);var r=function(){return};exports.run=function(){var r=$tw.tmap.utils;switch(arguments[0]){case\"basename\":return r.getBasename(arguments[1]||this.getVariable(\"currentTiddler\"));case\"testJSON\":var t=$tw.wiki.getTiddler(this.getVariable(\"currentTiddler\"));try{JSON.parse(t.fields[arguments[1]]);return\"valid\"}catch(e){return\"malformed\"}case\"splitAndSelect\":var a=this.getVariable(\"currentTiddler\");var n=a.split(arguments[1])[arguments[2]];return n!=null?n:a;case\"uuid\":return r.genUUID();case\"option\":var s=$tw.tmap.opt;var i=arguments[1].split(\".\");for(var u=0;u<i.length;u++){if(typeof s==\"object\"&&s[i[u]]){s=s[i[u]]}else{return\"property doesn't exist\"}}if(!(typeof s==\"string\"))return\"property is not a string\";return s}return\"wrong signature\"}})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/tmap.js",
            "type": "application/javascript",
            "module-type": "macro"
        },
        "$:/plugins/felixhayashi/tiddlymap/caretaker.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/caretaker.js\ntype: application/javascript\nmodule-type: startup\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";exports.name=\"tmap.caretaker\";exports.platforms=[\"browser\"];exports.after=[\"startup\"];exports.before=[\"rootwidget\"];exports.synchronous=true;var e=require(\"$:/plugins/felixhayashi/tiddlymap/utils.js\").utils;var t=require(\"$:/plugins/felixhayashi/tiddlymap/adapter.js\").Adapter;var i=require(\"$:/plugins/felixhayashi/tiddlymap/dialog_manager.js\").DialogManager;var a=require(\"$:/plugins/felixhayashi/tiddlymap/callback_manager.js\").CallbackManager;var s=require(\"$:/plugins/felixhayashi/vis/vis.js\");var r=function(t){var i=t;if(!i.path)i.path=e.getDataMap();i.path.pluginRoot=\"$:/plugins/felixhayashi/tiddlymap\";i.path.edgeTypes=\"$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes\";i.path.listEdgeTypes=\"$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:\";i.path.fieldEdgeTypes=\"$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-field:\";i.path.views=\"$:/plugins/felixhayashi/tiddlymap/graph/views\";i.path.options=\"$:/plugins/felixhayashi/tiddlymap/config\";i.path.tempRoot=\"$:/temp/felixhayashi/tiddlymap\";i.path.localHolders=\"$:/temp/felixhayashi/tiddlymap/holders\";i.path.dialogs=\"$:/plugins/felixhayashi/tiddlymap/dialog\";i.path.footers=\"$:/plugins/felixhayashi/tiddlymap/dialogFooter\";if(!i.ref)i.ref=e.getDataMap();i.ref.defaultGraphViewHolder=\"$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder\";i.ref.graphBar=\"$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar\";i.ref.sysConf=\"$:/plugins/felixhayashi/tiddlymap/config/sys\";i.ref.sysUserConf=\"$:/plugins/felixhayashi/tiddlymap/config/sys/user\";i.ref.visConf=\"$:/plugins/felixhayashi/tiddlymap/config/vis\";i.ref.visUserConf=\"$:/plugins/felixhayashi/tiddlymap/config/vis/user\";i.ref.welcomeFlag=\"$:/plugins/felixhayashi/tiddlymap/flag/welcome\";i.ref.focusButton=\"$:/plugins/felixhayashi/tiddlymap/misc/focusButton\";i.ref.sysMeta=\"$:/plugins/felixhayashi/tiddlymap/misc/meta\";i.ref.sidebarBreakpoint=\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\";if(!i.config)i.config=e.getDataMap();i.config.sys=e.merge($tw.wiki.getTiddlerData(i.ref.sysConf,{}),e.unflatten($tw.wiki.getTiddlerData(i.ref.sysUserConf,{})));i.config.vis=e.merge($tw.wiki.getTiddlerData(i.ref.visConf,{}),e.unflatten($tw.wiki.getTiddlerData(i.ref.visUserConf,{})));if(!i.field)i.field=e.getDataMap();$tw.utils.extend(i.field,i.config.sys.field);if(!i.misc)i.misc=e.getDataMap();i.misc.unknownEdgeLabel=\"tmap:undefined\";i.misc.cssPrefix=\"tmap-\";i.misc.sysEdgeTypeNS=\"tmap\";i.misc.liveViewLabel=\"Live View\";if(!i.filter)i.filter=e.getDataMap();i.filter.edgeTypes=\"[prefix[\"+i.path.edgeTypes+\"]]\";i.filter.listEdgeTypes=\"[prefix[\"+i.path.listEdgeTypes+\"]]\";i.filter.fieldEdgeTypes=\"[prefix[\"+i.path.fieldEdgeTypes+\"]]\";i.filter.views=\"[has[\"+i.field.viewMarker+\"]]\";i.filter.defaultEdgeFilter=i.filter.edgeTypes+\"-[suffix[tw-body:link]]\"+\"-[suffix[tw-list:tags]]\";+\"-[suffix[tw-list:list]]\";if(!i.selector)i.selector=e.getDataMap();var a=\"[all[tiddlers+shadows]!has[draft.of]]\";i.selector.allEdgeTypes=a+\" +\"+i.filter.edgeTypes;i.selector.allEdgeTypesByLabel=i.selector.allEdgeTypes+\" +[removeprefix[\"+i.path.edgeTypes+\"/]]\";i.selector.allViews=a+\" +\"+i.filter.views;i.selector.allViewsByLabel=i.selector.allViews+\"+[removeprefix[\"+i.path.views+\"/]]\";i.selector.allPotentialNodes=\"[all[tiddlers]!is[system]!has[draft.of]]\";i.selector.allListEdgeStores=a+\" +\"+i.filter.listEdgeTypes+\" +[removeprefix[\"+i.path.listEdgeTypes+\"]]\";i.selector.allFieldEdgeStores=a+\" +\"+i.filter.fieldEdgeTypes+\" +[removeprefix[\"+i.path.fieldEdgeTypes+\"]]\"};var l=function(t){$tw.tmap.start(\"Attaching Indeces\");if(!t.indeces){t.indeces={tById:e.getDataMap(),idByT:e.getDataMap()}}var i=$tw.wiki.allTitles();for(var a=0;a<i.length;a++){var s=i[a];var r=$tw.wiki.getTiddler(s);if(!e.isSystemOrDraft(r)){var l=r.fields[$tw.tmap.opt.field.nodeId];if(!l){l=e.genUUID();e.setField(r,$tw.tmap.opt.field.nodeId,l)}t.indeces.tById[l]=s;t.indeces.idByT[s]=l}}$tw.tmap.stop(\"Attaching Indeces\")};var d=function(t){var i=t;var a=function(){};if(e.isTrue($tw.tmap.opt.config.sys.debug,false)&&console){i.logger=function(){if(arguments.length<2)return;var e=Array.prototype.slice.call(arguments);var t=e.shift(e);var i=console.hasOwnProperty(t)?t:\"debug\";console[i].apply(console,e)};i.start=function(e){console.time(\"timer: \"+e)};i.stop=function(e){console.timeEnd(\"timer: \"+e)}}else{i.logger=a;i.start=a;i.stop=a}i.notify=$tw.tmap.opt.config.sys.notifications===\"true\"?e.notify:a};var p=function(){for(var e=$tw.tmap.registry.length-1;e>=0;e--){var t=$tw.tmap.registry[e];if(t.isZombieWidget()){$tw.tmap.logger(\"warn\",\"A graph has been removed.\");t.destruct();$tw.tmap.registry.splice(e,1)}}};var f=function(t){var i=$tw.tmap.opt.field.nodeId;var a=t.fields[i];if(!a)return;var s=$tw.tmap.opt;var r=e.getTiddlersWithField(i,a,{limit:2});delete r[t.fields.title];var l=Object.keys(r)[0];if(l){var d={param:{changedTiddler:t.fields.title,existingTiddler:l,idField:i,id:a}};$tw.tmap.dialogManager.open(\"dublicateIdInfo\",d)}if(l){e.setField(t,$tw.tmap.opt.field.edges,undefined);$tw.tmap.adapter.assignId(t,true)}};var n=function(t){if(!t)t=$tw.tmap;if(!t.opt)t.opt=e.getDataMap();r(t.opt);d(t,t.opt);$tw.tmap.logger(\"warn\",\"Rebuilt globals\")};var o=function(t){if(t[\"$:/HistoryList\"]){var i=e.getField(\"$:/HistoryList\",\"current-tiddler\")}else if(t[\"$:/temp/focussedTiddler\"]){var i=e.getField(\"$:/temp/focussedTiddler\",\"text\")}if(i!=null){e.setField(\"$:/temp/tmap/currentTiddler\",\"text\",i)}};var g=function(t){var i=\"[prefix[\"+$tw.tmap.opt.path.options+\"]!has[draft.of]]\";if(e.getMatches(i,Object.keys(t)).length){n()}};var m=function(t){if(e.isTrue($tw.tmap.opt.config.sys.debug,false)){for(var i in t){if(t[i].deleted){$tw.tmap.logger(\"warn\",\"Tiddler deleted:\",i)}else{$tw.tmap.logger(\"warn\",\"Tiddler modified:\",e.getTiddler(i))}}}};var y=function(t){$tw.wiki.addEventListener(\"change\",function(i){$tw.tmap.start(\"Caretaker handling changes\");m(i);t.handleChanges(i);g(i);for(var a in i){if(e.isSystemOrDraft(a))continue;var s=e.getTiddler(a);if(s){f(s);$tw.tmap.adapter.assignId(s)}else{}}o(i);$tw.tmap.stop(\"Caretaker handling changes\")})};var c=function(){if(e.tiddlerExists($tw.tmap.opt.ref.sysMeta))return;$tw.tmap.logger(\"warn\",\"Creating meta file\");var t=$tw.wiki.getTiddler($tw.tmap.opt.path.pluginRoot);$tw.wiki.setTiddlerData($tw.tmap.opt.ref.sysMeta,{originalVersion:t.fields.version,dataStructureState:\"0.6.9\",showWelcomeMessage:true})};exports.startup=function(){$tw.tmap=e.getDataMap();$tw.tmap.utils=e;$tw.tmap.keycharm=s.keycharm;$tw.tmap.registry=[];window.setInterval(p,1e3);n($tw.tmap);l($tw.tmap);$tw.tmap.adapter=new t;c();$tw.tmap.callbackManager=new a;$tw.tmap.dialogManager=new i($tw.tmap.callbackManager);y($tw.tmap.callbackManager);$tw.tmap.logger(\"warn\",\"TiddlyMap's caretaker successfully started\")}})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/caretaker.js",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/felixhayashi/tiddlymap/fixer.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/fixer.js\ntype: application/javascript\nmodule-type: startup\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";exports.name=\"tmap.fixer\";exports.after=[\"tmap.caretaker\"];exports.before=[\"rootwidget\"];exports.synchronous=true;var t=require(\"$:/plugins/felixhayashi/tiddlymap/utils.js\").utils;var e=require(\"$:/plugins/felixhayashi/tiddlymap/adapter.js\").Adapter;var r=require(\"$:/plugins/felixhayashi/tiddlymap/view_abstraction.js\").ViewAbstraction;var a=require(\"$:/plugins/felixhayashi/tiddlymap/edgetype.js\").EdgeType;var i=function(e,r){var i=t.getByPrefix(e);for(var s=0;s<i.length;s++){var p=t.getBasename(i[s]);if(p===\"__noname__\"){p=\"tmap:unknown\"}p=new a(p);if(!p.exists())p.persist();var d=$tw.wiki.getTiddlerData(i[s]);for(var u=0;u<d.length;u++){d[u].type=(r?r+\":\":\"\")+p.getId();$tw.tmap.adapter.insertEdge(d[u])}$tw.wiki.deleteTiddler(i[s])}};exports.startup=function(){var e=$tw.wiki.getTiddlerData($tw.tmap.opt.ref.sysMeta,{});var a=$tw.wiki.getTiddler($tw.tmap.opt.path.pluginRoot);$tw.tmap.logger(\"debug\",\"Fixer is started\");$tw.tmap.logger(\"debug\",\"Data-structure currently in use: \",e.dataStructureState);var s={before:\"0.6.11\",after:\"0.7.0\"};if($tw.utils.checkVersions(s.before,e.dataStructureState)){$tw.tmap.logger(\"debug\",\"Upgrading data structure to\",s.after);i(\"$:/plugins/felixhayashi/tiddlymap/graph/edges\",null);var p=$tw.tmap.opt.selector.allViews;var d=t.getMatches(p);for(var u=0;u<d.length;u++){var g=new r(d[u]);i(g.getRoot()+\"/graph/edges\",g)}t.setEntry($tw.tmap.opt.ref.sysMeta,\"dataStructureState\",s.after)}var s={before:\"0.7.31\",after:\"0.7.32\"};if($tw.utils.checkVersions(s.before,e.dataStructureState)){$tw.tmap.logger(\"debug\",\"Upgrading data structure to\",s.after);var l=$tw.tmap.adapter.getView(\"Live View\");l.setNodeFilter(\"[field:title{$:/temp/tmap/currentTiddler}]\",true);l.setConfig({\"refresh-trigger\":null,\"refresh-triggers\":$tw.utils.stringifyList([\"$:/temp/tmap/currentTiddler\"])});t.setEntry($tw.tmap.opt.ref.sysMeta,\"dataStructureState\",s.after)}}})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/fixer.js",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/felixhayashi/tiddlymap/startup/listener.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/startup/listener.js\ntype: application/javascript\nmodule-type: startup\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";exports.name=\"tmap.listener\";exports.platforms=[\"browser\"];exports.after=[\"rootwidget\",\"tmap.caretaker\"];exports.before=[\"story\"];exports.synchronous=true;var e=require(\"$:/plugins/felixhayashi/tiddlymap/utils.js\").utils;var t=require(\"$:/plugins/felixhayashi/tiddlymap/edgetype.js\").EdgeType;var a=function(){this.adapter=$tw.tmap.adapter;this.wiki=$tw.wiki;this.logger=$tw.tmap.logger;this.opt=$tw.tmap.opt;e.addListeners({\"tmap:tm-remove-edge\":this.handleRemoveEdge,\"tmap:tm-fill-edge-type-form\":this.handleFillEdgeTypeForm,\"tmap:tm-save-edge-type-form\":this.handleSaveEdgeTypeForm,\"tmap:tm-create-edge-type\":this.handleCreateEdgeType,\"tmap:tm-create-edge\":this.handleCreateEdge,\"tmap:tm-suppress-dialog\":this.handleSuppressDialog,\"tmap:tm-generate-widget\":this.handleGenerateWidget,\"tmap:tm-download-graph\":this.handleDownloadGraph,\"tmap:tm-manage-edge-types\":this.handleManageEdgeTypes,\"tmap:tm-cancel-dialog\":this.handleCancelDialog,\"tmap:tm-confirm-dialog\":this.handleConfirmDialog},$tw.rootWidget,this)};a.prototype.handleCancelDialog=function(t){e.setField(t.param,\"text\",\"\")};a.prototype.handleConfirmDialog=function(t){e.setField(t.param,\"text\",\"1\")};a.prototype.handleManageEdgeTypes=function(e){if(!e.paramObject)e.paramObject={};var t={param:{filter:this.opt.selector.allEdgeTypesByLabel+\" +[search:title{$:/temp/tmap/edgeTypeSearch}]\"+\" +[sort[title]]\"}};var a=$tw.tmap.dialogManager.open(\"edgeTypeManager\",t);var p=e.paramObject.type;if(p){this.handleFillEdgeTypeForm({paramObject:{id:p,output:a.fields[\"output\"]}})}};a.prototype.handleSuppressDialog=function(t){if(e.isTrue(t.paramObject.suppress,false)){e.setEntry(this.opt.ref.sysUserConf,\"suppressedDialogs.\"+t.paramObject.dialog,true)}};a.prototype.handleDownloadGraph=function(t){var a=this.adapter.getGraph({view:t.paramObject.view});a.nodes=e.convert(a.nodes,\"array\");a.edges=e.convert(a.edges,\"array\");e.setField(\"$:/temp/tmap/export\",\"text\",JSON.stringify(a,null,2));$tw.rootWidget.dispatchEvent({type:\"tm-download-file\",param:\"$:/temp/tmap/export\",paramObject:{filename:t.paramObject.view+\".json\"}})};a.prototype.handleGenerateWidget=function(e){if(!e.paramObject)e.paramObject={};var t={dialog:{preselects:{view:e.paramObject.view||\"Default\"}}};$tw.tmap.dialogManager.open(\"getWidgetCode\",t)};a.prototype.handleRemoveEdge=function(e){this.adapter.deleteEdge(e.paramObject)};a.prototype.handleCreateEdge=function(e){var t={from:this.adapter.makeNode(e.paramObject.from).id,to:this.adapter.makeNode(e.paramObject.to).id,type:e.paramObject.label,id:e.paramObject.id};this.adapter.insertEdge(t);$tw.tmap.notify(\"Edge inserted\")};a.prototype.handleSaveEdgeTypeForm=function(a){var p=e.getTiddler(a.paramObject.output);var i=new t(p.fields.id);if(e.isTrue(p.fields[\"temp.deleteType\"],false)){this.logger(\"debug\",\"Deleting type\",i);this.adapter._processEdgesWithType(i,{action:\"delete\"});this.wiki.addTiddler(new $tw.Tiddler({title:a.paramObject.output}));$tw.tmap.notify(\"Deleted type\")}else{i.loadDataFromTiddler(p);i.persist();if(!p.fields[\"temp.newId\"]){e.setField(p,\"temp.newId\",p.fields[\"id\"])}else if(p.fields[\"temp.newId\"]!==p.fields[\"id\"]){this.adapter._processEdgesWithType(i,{action:\"rename\",newName:p.fields[\"temp.newId\"]});e.setField(p,\"id\",p.fields[\"temp.newId\"])}$tw.tmap.notify(\"Saved type data\")}};a.prototype.handleFillEdgeTypeForm=function(a){var p=new t(a.paramObject.id);var i=a.paramObject.output;var r=this.adapter.selectEdgesByType(p);p.persist(i,true);e.setField(i,\"temp.idImmutable\",p.isShipped()?\"true\":\"\");e.setField(i,\"temp.newId\",p.getId());e.setField(i,\"temp.usageCount\",Object.keys(r).length);e.deleteByPrefix(\"$:/state/tabs/edgeTypeManager\")};a.prototype.handleCreateEdgeType=function(a){var p=this.wiki.generateNewTitle(this.opt.path.edgeTypes+\"/New Type\");var i=new t(e.getBasename(p));i.persist();this.handleFillEdgeTypeForm({paramObject:{id:i.getId(),output:a.paramObject.output}})};exports.startup=function(){new a}})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/startup/listener.js",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/cannotDeleteViewDialog": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/cannotDeleteViewDialog",
            "subtitle": "{{$:/core/images/locked-padlock}} You cannot delete this view!",
            "text": "It is not possible to delete the current view as ''<<count>>'' tiddlers\nare referencing it. To delete the view you must first remove the tiddlymap\nwidgets in the tiddlers listed below or change their view attributes.\n\n''References''\n\n<ul>\n<$list filter=<<filter>> variable=\"item\">\n  <li><$link><<item>></$link></li>\n</$list>\n</ul>\n\nAfter the references are removed, you may delete the view."
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureTiddlyMap": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureTiddlyMap",
            "subtitle": "{{$:/core/images/options-button}} Configuration of ~TiddlyMap",
            "text": "<$importvariables filter=\"[[$:/plugins/felixhayashi/tiddlymap/misc/macros]]\">\n\nPlease visit the [[online docs|http://tiddlymap.org#Changing%20TiddlyMap's%20default%20configuration]] for more information about the following options.\n\n<fieldset>\n  <legend>Field settings</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row title:\"Node-id field\" field:\"config.sys.field.nodeId\" type:\"input-text\"\n               descr:\"Field with a unqiue value to identify tiddlers and trace their changes (missing ids are autogenerated).\"\n               note:\"Setting this field to 'title' will prevent ~TiddlyMap from discovering name changes.\">>\n    <<tmap-row title:\"Node-icon field\" field:\"config.sys.field.nodeIcon\" type:\"input-text\"\n               descr:\"Local image used as node image in the graphs.\">>\n    <<tmap-row title:\"Node-label field\" field:\"config.sys.field.nodeLabel\" type:\"input-text\" \n               descr:\"Alternative node label to use instead of the title.\">>\n    <<tmap-row title:\"Node-info field\" field:\"config.sys.field.nodeInfo\" type:\"input-text\"\n               descr:\"Field used as tooltip when hovering a node in a graph.\"\n               note:\"It is prohibited to use the text field here.\">>\n  </table>   \n</fieldset>\n\n<fieldset><legend>System's talkativeness</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row title:\"Debug output\" field:\"config.sys.debug\" type:\"input-checkbox\"\n               descr:\"Set this to true if you want debug information to be displayed in the browser console.\">>\n    <<tmap-row title:\"Show notifications\" field:\"config.sys.notifications\" type:\"input-checkbox\"\n               descr:\"Set this to true if you want to receive fade-out notifications for important events.\">>\n  </table>   \n</fieldset>\n\n<fieldset><legend>Interaction & behaviour</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row title:\"Allow single click mode\" field:\"config.sys.singleClickMode\" type:\"input-checkbox\"\n               descr:\"A single click on a node is sufficient to open the corresponding tiddler.\"\n               note:\"Drag and drop will still work and does not cause a tiddler to be opened.\">>\n    <<tmap-row title:\"Edge click behaviour\" field:\"config.sys.edgeClickBehaviour\" type:\"input-select\"\n               selectFilter:\"[[nothing|Nothing]] [[manager|Open edge-type manager]]\"\n               descr:\"What should happen when you click on an edge?\">>\n    <<tmap-row type:\"input-select\" title:\"Raster size\" field:\"config.sys.raster\"\n               selectFilter:\"[[|disabled]] [[5|5px]] [[10|10px]] [[15|15px]] [[20|20px]] [[30|30px]] [[40|40px]]\"\n               descr:\"Snap nodes to an invisible raster of the given size after drag'n'drop.\"\n               note:\"Only works when the view is not in floating mode\">>\n  </table>\n</fieldset>\n\n</$importvariables>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/configureView": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/configureView",
            "subtitle": "{{$:/core/images/theme-button}} View configuration -- <<view>>",
            "text": "<$importvariables filter=\"[[$:/plugins/felixhayashi/tiddlymap/misc/macros]]\">\n\n<fieldset><legend>Statistics</legend>\n  <table class=\"tmap-key-value-table\">\n    <tr>\n      <th align=\"left\">Created on</th>\n      <td><<createdOn>></td>\n    </tr>\n    <tr>\n      <th align=\"left\">Nodes contained in graph</th>\n      <td><<numberOfNodes>></td>\n    </tr>\n    <tr>\n      <th align=\"left\">Edges contained in graph</th>\n      <td><<numberOfEdges>></td>\n    </tr>\n  </table>\n</fieldset>\n\n<fieldset><legend>Export</legend>\n  <$button>Download graph (JSON format)\n    <$action-sendmessage $message=\"tmap:tm-download-graph\" view=<<view>> />\n  </$button>\n</fieldset>\n\n\n<fieldset><legend>Layout</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row title:\"Floating nodes\" field:\"config.physics_mode\" type:\"input-checkbox\"\n               descr:\"Set this to true if you want your nodes to freely swirl around.\">>\n  </table>\n</fieldset>\n\n<fieldset><legend>Other</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row title:\"Edge-type namespace\" field:\"config.edge_type_namespace\" type:\"input-text\"\n               descr:\"A namespace (like 'foaf' in 'foaf:knows') that will be automatically added to all edge-types you create in this view.\"\n               note:\"All namespaces are automatically stripped when the edge label is displayed in the graph\">>\n  </table>\n</fieldset>\n\n<fieldset><legend>Neighbourhood</legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row title:\"Neighbourhood scope\" field:\"config.neighbourhood_scope\" type:\"input-select\"\n               selectFilter:\"[[0|Do not display a neighbourhood]] [[1|1 steps away]] [[2|2 steps away]] [[3|3 steps away]] [[4|4 steps away]] [[5|5 steps away]] [[*|No limit]]\"\n               descr:\"Display the neighbourhood that can be reached within the given number of steps starting from the matches returned by the node filter.\">>\n    <<tmap-row type:\"input-checkbox\" title:\"Show inter-neighbour edges\" field:\"config.show_inter_neighbour_edges\"\n               descr:\"When neighbours are displayed in a map along with matches, also display their relations to other neighbours\">>\n  </table>\n</fieldset>\n\n</$importvariables>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/getConfirmation": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/getConfirmation",
            "subtitle": "{{$:/core/images/import-button}} You must confirm in order to proceed!",
            "text": "<<message>>\n\n''Are you really sure you want to do this?''\n\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/createView": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/createView",
            "subtitle": "{{$:/core/images/new-button}} Creating a new view",
            "text": "Please specify a view name.\n\nName:\n<$edit-text focus=\"true\" tiddler=<<output>> field=\"text\" type=\"text\" tag=\"input\" default=\"\"\n            class=\"tmap-trigger-field tmap-triggers-ok-button-on-enter\" /> <sup>[1]</sup>\n\n---\n\n<sup>[1]</sup> <small>Attention: using the name of an existing view will overwrite it!</small>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/deleteNodeDialog": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/deleteNodeDialog",
            "subtitle": "{{$:/core/images/delete-button}} Deleting the node named \"<<var.nodeLabel>>\"",
            "text": "''Please choose an option or abort:''\n\n<$radio tiddler=<<output>> field=\"opt.delete\" value=\"from system\">\n  Delete from system <sup>[1]</sup>\n</$radio><br />\n<$radio tiddler=<<output>> field=\"opt.delete\" value=\"from filter\">\n  Delete from graph's filter <sup>[2]</sup>\n</$radio>\n\n---\n\n<sup>[1]</sup>\n<small>This will delete the node named \"<<var.nodeLabel>>\" ''and'' the corresponding tiddler named \"<<var.nodeRef>>\" ''and'' all connected edges.</small><br/>\n<sup>[2]</sup>\n<small>''Important:'' Removing a node from the graph's filter only works, if the node has been added in the map editor per double click or via \"Add Node\". Then we can delete the node \"<<var.nodeLabel>>\" from the existing filter used by the graph without removing the underlying tiddler.  If the node hasn't been added as mentioned above, you need to change the underlying tiddler in a way that it doesn't match your filter anymore, if you want it to be removed from the graph.</small>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/dublicateIdInfo": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/dublicateIdInfo",
            "subtitle": "{{$:/core/images/info-button}} Dublicate id detected",
            "buttons": "ok_suppress",
            "text": "~TiddlyMap requires the value of the id field (\"<<param.idField>>\") to be\nunique in order to correctly identify nodes and tiddlers.\n\nThe tiddler \"<<param.changedTiddler>>\" had the same id as the\ntiddler \"<<param.existingTiddler>>\".\n\nTherefore ~TiddlyMap\n\n* assigned a new id to tiddler \"<<param.changedTiddler>>\"\n* removed all edges from \"<<param.changedTiddler>>\"\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeNotVisible": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeNotVisible",
            "subtitle": "{{$:/core/images/info-button}} Edge will not be visible in view \"<<view>>\"",
            "buttons": "ok_suppress",
            "text": "~TiddlyMap just noticed that you created an edge of type <<type>> that will not be visible in this view.\n\nThe reason is that the view's edge filter prevents edges of type \"<<type>>\" from being displayed. To change this, open the view's menu and change the edge-filter configuration.\n\nFor further information, please see: [[Node and edge-type filters|http://tiddlymap.org#Node%20and%20edge-type%20filters]]."
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/deleteType": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/deleteType",
            "caption": "Removal",
            "text": "<table class=\"tmap-config-table\">\n  <$macrocall $name=\"tmap-row\" title=\"Delete type\" field=\"temp.deleteType\" type=\"input-checkbox\" default={{!id}} readonly={{!!temp.idImmutable}}\n             descr=\"If you want to delete this edge-type, set this to true and click the save button afterwards. System types (e.g. 'tw-body:link') cannot be deleted.\"\n             note=\"Consequently, all edges of this type will be deleted.\" />\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/description": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/description",
            "caption": "Description",
            "text": "<table class=\"tmap-config-table\">\n  <<tmap-row title:\"Description\" field:\"description\" type:\"input-textarea\"\n             descr:\"An optional description for this edge-type. The description will be displayed as tooltip when moving the mouse over an edge of this type.\">>\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/generalSettings": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/generalSettings",
            "caption": "General",
            "text": "<table class=\"tmap-config-table\">\n  <$macrocall $name=\"tmap-row\" title=\"Identifier\" field=\"temp.newId\" type=\"input-text\" default={{!!id}} readonly={{!!temp.idImmutable}}\n              descr=\"A unique identifier (e.g. &quot;foaf:name&quot;).\" #FFA500/>\n  <<tmap-row title:\"Label\" field:\"label\" type:\"input-text\"\n             descr:\"An optional alias used as edge-label.\">>\n  <<tmap-row title:\"Show label\" field:\"show-label\" type:\"input-checkbox\" default:\"true\"\n             descr:\"If unchecked, no edge label will be displayed.\">>\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/overview": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/overview",
            "caption": "Overview",
            "text": "! {{!!id}}\n\n<table class=\"tmap-key-value-table\">\n  <$set name=\"self\" value=<<currentTiddler>>>\n    <$list filter=\"[[Created on|created]]\n                   [[Modified on|modified]]\n                   [[Edges of this type|temp.usageCount]] \">\n      <tr>\n        <th align=\"left\"><<tmap \"splitAndSelect\" \"|\" \"0\">></th>\n        <td>\n          <$transclude tiddler=<<self>> field=<<tmap \"splitAndSelect\" \"|\" \"1\">> />\n        </td>\n      </tr>\n    </$list>\n  </$set>\n</table>\n\n{{!!description}}\n\n  "
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/styling": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/styling",
            "caption": "Styling",
            "text": "\\define flashTypeClass() tmap-flash-message tmap-$(flashType)$\n\n<$set name=\"trigger\" value={{!!style}}>\n<$set name=\"flashType\" value=<<tmap \"testJSON\" \"style\">>>\n<div class=<<flashTypeClass>>>The JSON you entered is: <<flashType>></div>\n</$set>\n</$set>\n\n<table class=\"tmap-config-table\">\n  <$macrocall $name=\"tmap-row\" title=\"Styling\" field=\"style\" type=\"input-textarea\" test=\"json\"\n             descr=\"Edge-types can be styled using a JSON format and the styling properties [[defined by Vis.js|http://visjs.org/docs/network/edges.html]]. Please [[validate your JSON|http://jsonlint.com/]] before saving.\" />\n</table>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager",
            "subtitle": "{{$:/core/images/tag-button}} Edge-type manager",
            "buttons": "edge_type_manager",
            "text": "\\define defaultTab() $:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/overview\n\\define settingsTab() $:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/generalSettings\n\n<$importvariables filter=\"[[$:/plugins/felixhayashi/tiddlymap/misc/macros]] [[$:/core/macros/tabs]]\">\n\n<div id=\"edge-type-manager\">\n  <div>\n    <div class=\"searchbar\">\n      <$edit-text focus=\"true\" tiddler=\"$:/temp/tmap/edgeTypeSearch\" type=\"search\" tag=\"input\" default=\"\" />\n    </div>\n    <ul>\n    <$list filter=<<param.filter>> emptyMessage=\"//No results//\">\n      <li>\n        <$button class=\"tc-btn-invisible tmap-link\">{{!!title}}\n          <$action-setfield $tiddler=<<qualify \"$:/state/tabs/edgeTypeManager\">> text=<<defaultTab>> />\n          <$action-sendmessage $message=\"tmap:tm-fill-edge-type-form\" id={{!!title}} output=<<output>> />\n        </$button>\n      </li>\n    </$list>\n    </ul>\n  </div>\n  <div>\n    <$reveal type=\"nomatch\" text=\"\" default={{!!id}} >\n      <$macrocall $name=\"tabs\" default=<<defaultTab>> state=\"$:/state/tabs/edgeTypeManager\"\n                  tabsList=\"[all[shadows]prefix[$:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/]]\" />\n    </$reveal>\n    <$reveal type=\"match\" text=\"\" default={{!!id}} >\n      <div style=\"text-align: center;\">Please select an edge-type from the list or create a new one.</div>\n    </$reveal>\n  </div>\n</div>\n\n</$importvariables>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/editFilters": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/editFilters",
            "subtitle": "{{$:/core/images/edit-button}} Filter editor -- <<view>>",
            "text": "<$importvariables filter=\"[[$:/plugins/felixhayashi/tiddlymap/misc/macros]]\">\n\n<fieldset>\n  <legend>Filters <sup>[1]</sup></legend>\n  <table class=\"tmap-config-table\">\n    <<tmap-row title:\"Node filter\" field:\"prettyNodeFilter\" type:\"input-textarea\"\n               descr:\"Show tiddlers in the graph that match this filter. Drafts and system tiddlers are automatically excluded.\">>\n    <<tmap-row title:\"Edge filter\" field:\"prettyEdgeFilter\" type:\"input-textarea\"\n               descr:\"Show edges that match this filter\" >>\n  </table>   \n</fieldset>\n\n</$importvariables>\n\n---\n\n<sup>[1]</sup> A new line is equivalent to a space symbol.<br />\n<sup>[2]</sup> It is suggested to read [[Node and edge-type filters|http://tiddlymap.org#Node%20and%20edge-type%20filters]] and [[Edge-type namespaces|http://tiddlymap.org#Node%20and%20edge-type%20filters]] before using ~Tiddlymap's filter editor. Completely new to filters? Please see [[Introduction to filter notation|http://tiddlywiki.com/#Introduction%20to%20filter%20notation]].\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenTiddlerEditor",
            "subtitle": "{{$:/core/images/edit-button}} <<param.ref>>",
            "text": "<div class=\"tmap-modal-editor\">\n  <$edit-text tiddler=<<param.ref>> field=\"color\" tag=\"input\" type=\"color\"/>\n  <$importvariables filter=\"[all[tiddlers+shadows]prefix[$:/core/macros/]]\">\n    <$set name=\"currentTiddler\" value=<<param.ref>> >\n      <$transclude tiddler=\"$:/core/ui/EditTemplate\" field=\"text\" mode=\"block\" />\n    </$set>\n  </$importvariables>\n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fieldChanged": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fieldChanged",
            "subtitle": "{{$:/core/images/info-button}} The field \"<<name>>\" changed",
            "text": "You changed the field \"<<name>>\" from \"<<oldValue>>\" to \"<<newValue>>\".\n\nIt is recommended to let ~TiddlyMap copy all values from the former field \"<<oldValue>>\" to the new field \"<<newValue>>\" so the data stored in \"<<oldValue>>\" is not lost. This operation has to be done now or never.\n\nDo you want to move each tiddler's existing \"<<oldValue>>\" value to \"<<newValue>>\"? Please note that any value currently stored in \"<<newValue>>\" would consequently be overridden and the old field \"<<oldValue>>\" would be eventually removed!"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenNotSupported": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/fullscreenNotSupported",
            "subtitle": "{{$:/core/images/info-button}} Your machine does not support fullscreen",
            "buttons": "ok_suppress",
            "text": "Please have a look [[here|http://caniuse.com/#feat=fullscreen]] to see a list of supported devices/browsers.\n\nSorry for this :(\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/getWidgetCode": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/getWidgetCode",
            "subtitle": "{{$:/core/images/permalink-button}} Widget Code Generator",
            "buttons": "ok",
            "text": "<$importvariables filter=\"[[$:/plugins/felixhayashi/tiddlymap/misc/macros]]\">\n\nThe following wizard will assist you in creating the widget code you can use (copy'n'paste) to embed this view in a tiddler. Please visit the [[online demo|http://tiddlymap.org]] for some examples on how the attributes below affect the displayed graph.\n\n''Widget-code''\n\n<pre style=\"white-space: normal;\">\n&lt;$tiddlymap\n\nview=\"{{!!view}}\"\n\n<$list filter=\"[field:title<output>field:var.click-to-use[false]]\">\n  click-to-use=\"false\"\n</$list>\n<$list filter=\"[field:title<output>has[var.editor]]\">\n  editor=\"<$view tiddler=<<output>> field='var.editor' />\"\n</$list>\n<$list filter=\"[field:title<output>has[var.width]]\">\n  width=\"<$view tiddler=<<output>> field='var.width' />\"\n</$list>\n<$list filter=\"[field:title<output>has[var.height]]\">\n  height=\"<$view tiddler=<<output>> field='var.height' />\"\n</$list>\n<$list filter=\"[field:title<output>has[var.class]]\">\n  class=\"<$view tiddler=<<output>> field='var.class' />\"\n</$list>\n<$list filter=\"[field:title<output>field:var.show-buttons[false]]\">\n  show-buttons=\"false\"\n</$list>\n\n&gt;&lt;/$tiddlymap&gt;\n</pre>\n\nIf you are unsure about a parameter, just leave everything as is and simply copy the widget code displayed above.\n\n<fieldset>\n  <legend>Parameters</legend> \n  <table class=\"tmap-config-table\">\n      <$macrocall $name=\"tmap-row\" type=\"input-select\" title=\"View\" field=\"view\" \n                 selectFilter=<<tmap \"option\" \"selector.allViewsByLabel\">>\n                 descr=\"The view to display\" />\n      <<tmap-row type:\"input-select\" title:\"Editor bar\" field:\"var.editor\"\n                 selectFilter:\"[[|Hidden]] [[vis|Simple]] [[advanced|Advanced]]\"\n                 descr:\"Whether the widget should act as an editor or not\">>\n      <<tmap-row type:\"input-text\" title:\"Height\" field:\"var.height\"\n                 descr:\"Graph's height in css units. Defaults to '300px'.\">>\n      <<tmap-row type:\"input-text\" title:\"Width\" field:\"var.width\"\n                 descr:\"Graph's width in css units. Defaults to '100%'.\">>\n      <<tmap-row type:\"input-text\" title:\"Class\" field:\"var.class\"\n                 descr:\"A custom class to apply your own css.\">>\n      <<tmap-row type:\"input-checkbox\" title:\"Click to use\" field:\"var.click-to-use\" default:\"true\"\n                 descr:\"A click is needed to enable the graph.\">>\n      <<tmap-row type:\"input-checkbox\" title:\"Show buttons\" field:\"var.show-buttons\" default:\"true\"\n                 descr:\"Show or hide the graph's navigation buttons.\">>\n  </table>\n</fieldset>\n\n</$importvariables>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/getNodeTitle": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/getNodeTitle",
            "subtitle": "{{$:/core/images/tag-button}} Please specify a node title",
            "text": "''Title'':\n<$edit-text field=\"text\" type=\"text\" tag=\"input\" default=\"\" focus=\"true\" tiddler=<<output>>\n            class=\"tmap-trigger-field tmap-triggers-ok-button-on-enter\" />\n            \n<sup>[1]</sup> \n\n<ul class=\"tmap-small-list\">\n<$set name=\"term\" value={{!!text}}>\n<$list filter=\"[all[tiddlers]!is[system]] +[search:title<term>]\" emptyMessage=\"//A tiddler with this title does not exist yet and will be created.//\">\n  <li>\n    <$button class=\"tc-btn-invisible tmap-link\">\n      <$view field=\"title\" />\n      <$action-setfield $tiddler=<<output>> text={{!!title}} />\n    </$button>\n  </li>\n</$list>\n</$set>\n</ul>\n\n---\n\n<sup>[1]</sup>\n<small>If you leave the title field blank, a name will be automatically generated for you. By choosing an existing title, you add the tiddler as node to the view.</small>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/previewContent": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/previewContent",
            "subtitle": "{{$:/core/images/video}} Previewing \"<<param.ref>>\"",
            "text": "<$transclude tiddler=<<param.ref>> field=\"text\" mode=\"block\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/getEdgeType": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/getEdgeType",
            "subtitle": "{{$:/plugins/felixhayashi/tiddlymap/icon}} Type specification (optional)",
            "text": "\\define filter() $(allEdgeTypes)$ +[search:title[$(term)$]]\n\nYou are about to connect \"<<fromLabel>>\" with \"<<toLabel>>\". Please specify a type.\n\n''Type'': \n<$edit-text focus=\"true\" tiddler=<<output>> field=\"text\" type=\"text\" tag=\"input\" default=\"\"\n            class=\"tmap-trigger-field tmap-triggers-ok-button-on-enter\" />\n\n<$set name=\"term\" value={{!!text}}>\n<$set name=\"allEdgeTypes\" value=<<tmap \"option\" \"selector.allEdgeTypesByLabel\">>>\n\n<ul class=\"tmap-small-list\">\n<$list filter=<<filter>> emptyMessage=\"//A type with this name does not exist yet and will be created.//\">\n  <li>\n    <$button class=\"tc-btn-invisible tmap-link\">\n      <$view field=\"title\" />\n      <$action-setfield $tiddler=<<output>> text={{!!title}} />\n    </$button>\n  </li>\n</$list>\n</ul>\n\n</$set>\n</$set>\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/getViewName": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/getViewName",
            "subtitle": "{{$:/core/images/tag-button}} Please specify a view name",
            "text": "Name:\n<$edit-text focus=\"true\" tiddler=<<output>> field=\"text\" type=\"text\" tag=\"input\" default=\"\"\n            class=\"tmap-trigger-field tmap-triggers-ok-button-on-enter\" /> <sup>[1]</sup>\n\n<$reveal type=\"nomatch\" text=\"0\" default=<<count>>>\n  \n  Note that ''<<count>>'' tiddlers are referencing this view and renaming the view will cause the reference to be invalid. It is recommended to first remove the tiddlymap widgets in the tiddlers listed below or change their view attributes accordingly.\n\n  ''References''\n\n  <ul>\n    <$list filter=<<filter>> variable=\"item\">\n      <li><$link><<item>></$link></li>\n    </$list>\n  </ul>\n  \n</$reveal>\n\n---\n\n<sup>[1]</sup> <small>Attention: using the name of an existing view will overwrite it!</small>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialog/welcome": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialog/welcome",
            "subtitle": "{{$:/core/images/info-button }} Welcome",
            "buttons": "ok",
            "text": "It seems that you freshly installed ~TiddlyMap.\n\n* In case you need any help, please consult the [[online docs|http://tiddlymap.org#Documentation]] first.\n* You are welcome to create an [[issue|https://github.com/felixhayashi/TW5-TiddlyMap/issues]] at ~GitHub for any bug you discover.\n* Make sure to revisit the [[demo site|http://tiddlymap.org]] to see whether your version is up-to-date.\n* If you like ~TiddlyMap, please give it a star at [[GitHub|https://github.com/felixhayashi/TW5-TiddlyMap]] or tell your friends about it :)\n\nHave a great time.\n\n---\n\n''Please note:'' By using this plugin you agree to the product's [[License Terms|$:/plugins/felixhayashi/tiddlymap/license]]. ~TiddlyMap is distributed under the [[BSD 2-Clause License|http://opensource.org/licenses/BSD-2-Clause]], which belongs to the same license family, as the license used by ~TiddlyWiki.\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/edge_type_manager": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/edge_type_manager",
            "text": "\\define defaultTab() $:/plugins/felixhayashi/tiddlymap/dialog/edgeTypeManager/overview\n\n<$button class=\"tmap-dialog-button tmap-save-button\" tooltip=\"Save the current changes\">Save\n  <$action-sendmessage $message=\"tmap:tm-save-edge-type-form\" output=<<output>> />\n</$button>\n<$button class=\"tmap-dialog-button tmap-create-button\" tooltip=\"Create a new edge-type\">Create\n  <$action-sendmessage $message=\"tmap:tm-create-edge-type\" output=<<output>> />\n</$button>\n<$button class=\"tmap-dialog-button tmap-cancel-button\" tooltip=\"Cancel the most resent changes and exit\">Quit\n  <$action-setfield $tiddler=<<result>> text=\"1\" />\n</$button>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok",
            "text": "<$button class=\"tmap-dialog-button tmap-ok-button\" tooltip=\"Confirm dialog\">OK\n\n  <!-- trigger dialog callback -->\n  <$action-setfield $tiddler=<<result>> text=\"1\" />\n                       \n</$button>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_cancel": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_cancel",
            "text": "<$transclude tiddler=\"$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok\" mode=\"inline\" />\n<$button class=\"tmap-dialog-button tmap-cancel-button\" tooltip=\"Close dialog without saving\">Cancel\n  <!-- trigger dialog callback -->\n  <$action-setfield $tiddler=<<result>> text=\"\" />\n</$button>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_suppress": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter/ok_suppress",
            "text": "<$set name=\"currentTiddler\" value=<<title>> >\n\n<$checkbox field=\"suppress\" checked=\"1\" unchecked=\"0\" default=\"0\"> Do not show this dialog again</$checkbox>\n<$button class=\"tmap-dialog-button tmap-ok-button\" tooltip=\"Confirm this dialog\">OK\n\n  <!-- trigger dialog callback -->\n  <$action-setfield $tiddler=<<result>> text=\"1\" />\n  \n  <!-- suppress dialog in the future -->\n  <$action-sendmessage $message=\"tmap:tm-suppress-dialog\"\n                       dialog=<<templateId>>\n                       suppress={{!!suppress}} />\n                       \n</$button>\n\n</$set>"
        },
        "$:/plugins/felixhayashi/tiddlymap/dialogFooter": {
            "title": "$:/plugins/felixhayashi/tiddlymap/dialogFooter",
            "text": "\\define footer() $:/plugins/felixhayashi/tiddlymap/dialogFooter/$(buttons)$\n\n<$transclude tiddler=<<footer>> />\n\n<!-- we need this button to be able to close a tiddler from outside programmatically -->\n<$button class=\"tmap-hidden-close-button\" message=\"tm-close-tiddler\" />"
        },
        "$:/plugins/felixhayashi/tiddlymap/license": {
            "title": "$:/plugins/felixhayashi/tiddlymap/license",
            "subtitle": "License",
            "caption": "License",
            "text": "!! ~TiddlyMap\n\nCopyright (c) 2014, Felix Küppers\nAll rights reserved.\n\n~TiddlyMap is licensed under the [[BSD 2-Clause License|http://opensource.org/licenses/BSD-2-Clause]]. For the exact license terms, please visit [[https://github.com/felixhayashi/TW5-TiddlyMap/blob/master/LICENSE]]. \n\n!! ~TiddlyWiki\n\nCreated by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\n\nCopyright © Jeremy Ruston 2004-2007 Copyright © ~UnaMesa Association 2007-2014\n\nPublished under the following [licenses](https://github.com/Jermolene/TiddlyWiki5/tree/master/licenses):\n\n# BSD 3-clause \"New\" or \"Revised\" License (including any right to adopt any future version of a license if permitted)\n# Creative Commons Attribution 3.0 (including any right to adopt any future version of a license if permitted)\n\n!! Vis.js\n\nCopyright (c) 2014 [Almende B.V.](https://github.com/almende/vis)\n\nPublished under the following licenses:\n\n# Apache License Version 2.0, January 2004 http://www.apache.org/licenses/\n# MIT License (MIT)\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/readme": {
            "title": "$:/plugins/felixhayashi/tiddlymap/readme",
            "text": "* Please refer to the project-readme hosted at [[https://github.com/felixhayashi/TW5-TiddlyMap]].\n* A demo with several examples and explanations can be found at [[http://tiddlymap.org]]."
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tmap:unknown": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tmap:unknown",
            "description": "Automatically assigned to an edge that does not have a type assigned",
            "style": "{\"color\":\"gray\"}",
            "show-label": "false"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-body:link": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-body:link",
            "description": "A link that is contained in the tiddler's body pointing to another resource.",
            "style": "{\"color\":\"orange\", \"dashes\":true}",
            "label": "links to",
            "text": ""
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:list": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:list",
            "description": "Contained in a list of this tiddler",
            "style": "{ \"color\": \"red\", \"dashes\":true}",
            "label": "listed in",
            "text": ""
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:tags": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/tw-list:tags",
            "description": "A tag that refers to a tiddler of the same name.",
            "style": "{ \"color\": \"DarkSlateGray\", \"dashes\":true}",
            "label": "tagged with"
        },
        "$:/plugins/felixhayashi/tiddlymap/media/fullscreen.png": {
            "title": "$:/plugins/felixhayashi/tiddlymap/media/fullscreen.png",
            "type": "image/png",
            "text": "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"
        },
        "$:/plugins/felixhayashi/tiddlymap/media/halfscreen.png": {
            "created": "20150408173343768",
            "id": "2ad95ce9-d39f-4f03-9cfa-7bbdfd26dd6c",
            "modified": "20150408173350882",
            "title": "$:/plugins/felixhayashi/tiddlymap/media/halfscreen.png",
            "type": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQffBAgRIDS2XJMlAAAEdklEQVRIx72XX2xTZRjGn+f9TiAEGHYhlMIObut0dGTAQlP2R2e9GUmNN0vYRrkgICEhIeDSdXeaE70SJIKXZNM7bkjmhX+CMgZVM3BpGIHM9nQOtlO0ac3oSiRkxlEvPF0AYXaw+lydnO/L+X3v95687/MSRcgwDMZisdeVUm/l8/kWkjUAHCRBMgvgF5LDAL5yu90/GIaR/69vcqFFv98vTqfzXRE5CQDkP9tF5LF9IjK/Zis0NTV16vLlyw8XDe7s7NxP8jM7KmzcuDHl8XisLVu2pCsrK3Pr1q3LAkAmk3FMTk6uMU3TaZrmplQq5SKJfD4Pkgf6+/s/Lxq8Z8+eDwC8BwDbtm0z29rafm5oaEgWk5YbN27oQ0NDdWNjY7X2zXx45syZ95/cp5580dXVdYpkLwC0tbX9dOTIkYjL5bqHIuV0Ou81NjZO3L9/H5OTkxUk3/D5fI5oNHr+meCurq6PSIYAIBgMDnZ0dFzHc6q+vv7X5cuX/5FIJKpJNnq93pXRaPTCv8CdnZ37ReQ4Sezbt++7QCAQwwvK7Xb/vmrVqtzY2JhbKdXi8/mskZGR6/M53r17t9I07S+SCAQCw3v37o0uBhAMBo8+7f3Zs2c/BYCBgQFvJBJpBoBUKqWdO3duTgBA07RjJLF161ZzsdBi1N7eHq2rq4uLCDZs2HAMAGgYBhOJxEMACIfDX2zfvj35oqDCDRQiBoBYLFbR19fXDgBlZWUipmm2AoCu66mlgD5LHo/njsvlSimlkMvlWkVEAiICj8djocSqqamxSGLZsmUBIdlsnyhdanBVVVVaRCAiTRqAV0QElZWVuaUCPJrbR6Xres6u6a9qIuIgiULtLaXKy8uzSikAcGiFJvB/ab7DAciKCDKZjKPU0Lt37zrsHGeF5DhJWJa1ZqkAwWDw6NOqWSqVWmPfcEJE5ApJjI+PO0sdcTKZdNoRXxGSX5OEaZqbSg22LGuT3aO/EV3XvyeJdDrtunnzZkWpoBMTExXT09MuEUFra+sPmmEY+UOHDoVInoxEInX19fV3nrc2L6Rr167ViQjy+XzI7/c/FADIZrOnASAej28eGBjwLnW0Q0ND3tu3b28midnZ2dOPea7Dhw8fEJF+pRQ6Ojq+bWlpMZcCOjo6Wjs4OLjLNoAHe3t7+x9zINFodHTnzp0rRaQlHo/XrF69ekbX9ekXhV66dGmXbX9PhMPh40/1XCMjIxeampocJBvj8XjN7OzsXG1t7W/PA41EIt7h4eE37UhP9/T0hBZ0mVevXj3f3Ny8UinVYlmWnkwmX1qxYsWfa9euLcpp3rp1S7948WJTPB5vsMvjiVAoFCra0IfD4XdI9hWmhPXr16eqq6unqqqq0i6X6155eXnW/jEdmUymzLIsZzKZfHlmZsZVqMkkD3Z3d/cveoQxDEMePHjQLSIfa5oGkrArz/wYU3guNBu7+/Ts2LHjE7/fv/gR5skDzM3NvSYibwNoVkq5STqUUiCZJTmhlBrO5/Nf+ny+HxcCFvQ3ae6MHdgDqpkAAAAASUVORK5CYII="
        },
        "$:/plugins/felixhayashi/tiddlymap/icon": {
            "created": "20150703133457707",
            "modified": "20150703141319471",
            "tags": "$:/tags/Image",
            "title": "$:/plugins/felixhayashi/tiddlymap/icon",
            "text": "<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   class=\"tc-image-tiddlymap-button tc-image-button\"\n   version=\"1.1\"\n   width=\"22pt\"\n   height=\"22pt\"\n   viewBox=\"0 0 128 128\">\n  <defs\n     id=\"defs4\">\n    <marker\n       refX=\"0\"\n       refY=\"0\"\n       orient=\"auto\"\n       id=\"Arrow1Lend\"\n       style=\"overflow:visible\">\n      <path\n         d=\"M 0,0 5,-5 -12.5,0 5,5 0,0 z\"\n         transform=\"matrix(-0.8,0,0,-0.8,-10,0)\"\n         id=\"path3850\"\n         style=\"fill-rule:evenodd;stroke:#000000;stroke-width:1pt\" />\n    </marker>\n    <marker\n       refX=\"0\"\n       refY=\"0\"\n       orient=\"auto\"\n       id=\"Arrow1Lstart\"\n       style=\"overflow:visible\">\n      <path\n         d=\"M 0,0 5,-5 -12.5,0 5,5 0,0 z\"\n         transform=\"matrix(0.8,0,0,0.8,10,0)\"\n         id=\"path3847\"\n         style=\"fill-rule:evenodd;stroke:#000000;stroke-width:1pt\" />\n    </marker>\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4329\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4321\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4315\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4307\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4299\" />\n    <inkscape:path-effect\n       effect=\"skeletal\"\n       id=\"path-effect4293\" />\n  </defs>\n  <g\n     transform=\"translate(0,-1024.5289)\"\n     id=\"layer1\">\n    <path\n       d=\"m 17.867073,4.5821643 a 3.7249374,3.7249374 0 1 1 -7.449875,0 3.7249374,3.7249374 0 1 1 7.449875,0 z\"\n       transform=\"matrix(-6.3328802,0,0,6.2775831,193.9581,1100.3667)\"\n       id=\"path4139-1-14\"\n       style=\"fill-opacity:1;fill-rule:nonzero\" />\n    <path\n       d=\"M 77.450496,1064.5069 C 58.849552,1025.9634 15.704158,1023.3858 2.8821873e-7,1034.558 L 0.02388589,1035.2674 C 24.502636,1022.2072 44.810725,1042.1507 60.163934,1074.112 z\"\n       id=\"path4337\"\n       style=\"fill-opacity:1;stroke-width:0.58181816;stroke-miterlimit:4;stroke-dasharray:none;marker-start:none;marker-end:none\" />\n    <path\n       d=\"m 12.878637,11.280739 4.75937,-2.7478243 4.759371,-2.7478236 0,5.4956479 0,5.495648 -4.759371,-2.747824 z\"\n       transform=\"matrix(4.6545455,0,0,4.6545455,-13.580429,1027.7638)\"\n       id=\"path3004\"\n       style=\"fill-opacity:1;fill-rule:nonzero\" />\n  </g>\n  <metadata\n     id=\"metadata3772\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:title></dc:title>\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n</svg>\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/media/surface.png": {
            "title": "$:/plugins/felixhayashi/tiddlymap/media/surface.png",
            "type": "image/png",
            "text": "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"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar",
            "text": "\\define showEdgeField() show-$(curEdgeId)$\n\n<!-- ===== View Switcher ======================================== -->\n\n<div class=\"tmap-menu-bar\">\n  View:\n  <$reveal type=\"match\" text=\"false\" default=<<param.isViewBound>> >\n    <$select tiddler=<<param.ref.viewHolder>> field=\"text\" default=<<param.ref.view>> >\n       <$list filter=<<tmap \"option\" \"selector.allViews\">> >\n         <option value={{!!title}}>\n           <$view tiddler=<<tmap \"basename\">> field=\"title\" />\n          </option>\n       </$list>\n    </$select>\n  </$reveal>\n  <$reveal type=\"match\" text=\"true\" default=<<param.isViewBound>> >\n    <b><<param.viewLabel>></b>\n  </$reveal>\n\n  <$button popup=<<qualify \"$:/temp/menu\">>>{{$:/core/images/menu-button}}</$button>\n  \n  <$reveal type=\"popup\" position=\"below\" state=<<qualify \"$:/temp/menu\">> >\n    <div class=\"tc-drop-down\">\n      <a href=\"http://tiddlymap.org#Documentation\" target=\"_blank\">{{$:/core/images/info-button}} Open online help</a>\n      <hr />\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-create-view\">{{$:/core/images/new-button}} Create empty view</$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-rename-view\">{{$:/core/images/tag-button}} Rename view</$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-delete-view\">{{$:/core/images/delete-button}} Delete view</$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-store-position\">{{$:/core/images/globe}} Save positions</$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-generate-widget\">{{$:/core/images/permalink-button}} Grab widget code</$button>\n      <hr />\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-edit-view\">{{$:/core/images/theme-button}} Configure view</$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-edit-filters\">{{$:/core/images/edit-button}} Edit filters</$button>\n      <hr />\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-configure-system\">{{$:/core/images/options-button}} Global configurations</$button>\n      <$button class=\"tc-btn-invisible\" message=\"tmap:tm-manage-edge-types\">{{$:/core/images/tag-button}} Manage edge-types</$button>\n    </div>\n  </$reveal>\n  \n  <$button class=\"tmap-radar-button\" popup=<<qualify \"$:/temp/radar\">>>☀</$button>  \n  \n  <$reveal type=\"popup\" position=\"below\" state=<<qualify \"$:/temp/radar\">> >\n    <div class=\"tc-drop-down\">\n    <$button class=\"tc-btn-invisible\">Hide neighbourhood\n      <$action-setfield $tiddler=<<param.ref.view>> config.neighbourhood_scope=\"0\" />\n    </$button>\n    <hr />\n    <$list filter=\"[[1|1 step distance]]\n                   [[2|2 step distance]]\n                   [[3|3 step distance]]\n                   [[4|4 step distance]]\n                   [[5|5 step distance]]\">\n      <$button class=\"tc-btn-invisible\">\n        <<tmap \"splitAndSelect\" \"|\" \"1\">>\n        <$action-setfield $tiddler=<<param.ref.view>>\n                          config.neighbourhood_scope=<<tmap \"splitAndSelect\" \"|\" \"0\">> />\n      </$button>\n    </$list>\n    <hr />\n    <$button class=\"tc-btn-invisible\">No limit\n      <$action-setfield $tiddler=<<param.ref.view>> config.neighbourhood_scope=\"100\" />\n    </$button>\n    </div>\n  </$reveal>\n  \n</div>"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/focusButton": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/focusButton",
            "text": "<div class=\"tmap-focus-button\">\n  <$reveal type=\"nomatch\" state=\"$:/temp/tmap/state/focus\" text=<<qualify>>>\n    <$button class=<<tv-config-toolbar-class>>>{{$:/core/images/advanced-search-button}}\n     <$action-setfield $tiddler=<<param.searchOutput>> text=\"\" />\n     <$action-setfield $tiddler=\"$:/temp/tmap/state/focus\" text=<<qualify>> />\n     <$action-sendmessage $message=\"tmap:tm-reset-focus\" />\n    </$button>\n  </$reveal>\n  <$reveal type=\"match\" state=\"$:/temp/tmap/state/focus\" text=<<qualify>>>\n    <$button class=<<tv-config-toolbar-class>> >{{$:/core/images/advanced-search-button}}\n     <$action-setfield $tiddler=\"$:/temp/tmap/state/focus\" text=\"\" />\n     <$action-sendmessage $message=\"tmap:tm-reset-focus\" />\n    </$button>\n    <div class=\"tmap-popup\">\n      <div class=\"tc-drop-down\">\n        <$edit-text focus=\"true\" tiddler=<<param.searchOutput>> field=\"text\" type=\"text\" tag=\"input\" default=\"\" />\n        <small><$count filter=<<param.nodeFilter>> /> results</small>\n        <hr />\n        <div class=\"tmap-very-small-list\">\n          <$list filter=<<param.nodeFilter>> variable=\"item\" emptyMessage=\"//No results//\">\n            <$button class=\"tc-btn-invisible\" set=\"$:/temp/tmap/state/focus\" setTo=\"\" message=\"tmap:tm-focus-node\" param=<<item>>>\n              <$view tiddler=<<item>> field=\"title\" />\n            </$button>\n          </$list>\n        </div>\n      </div>\n    </div>\n  </$reveal>\n</div>"
        },
        "$:/language/Buttons/TiddlyMap/Caption": {
            "title": "$:/language/Buttons/TiddlyMap/Caption",
            "text": "tiddlymap"
        },
        "$:/language/Buttons/TiddlyMap/Hint": {
            "title": "$:/language/Buttons/TiddlyMap/Hint",
            "text": "Show TiddlyMap actions"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/macros": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/macros",
            "text": "\\define input-text(field, index, default, readonly)\n  <$reveal type=\"match\" text=\"\" default=\"$readonly$\">\n    <$edit-text tiddler=<<output>> field=\"$field$\" index=\"$index$\" type=\"text\" tag=\"input\" default=\"$default$\" />\n  </$reveal>\n  <$reveal type=\"nomatch\" text=\"\" default=\"$readonly$\">\n    <input type=\"text\" value=\"$default$\" readonly=\"true\" disabled=\"true\" />\n  </$reveal>\n\\end\n\n\\define input-textarea(field, index, default, default)\n  <$edit-text tiddler=<<output>> field=\"$field$\" index=\"$index$\" type=\"text\" tag=\"textarea\" default=\"$default$\" />\n\\end\n\n\\define input-checkbox(field, index, readonly, default)\n  <$reveal type=\"match\" text=\"\" default=\"$readonly$\">\n    <$checkbox tiddler=<<output>> field=\"$field$\" index=\"$index$\" checked=\"true\" unchecked=\"false\" default=\"$default$\" />\n  </$reveal>\n  <$reveal type=\"nomatch\" text=\"\" default=\"$readonly$\">\n    <input type=\"checkbox\" value=\"$default$\" readonly=\"true\" disabled=\"true\" />\n  </$reveal>\n\\end\n\n\\define input-select(field, index, selectFilter, default)\n  <$select tiddler=<<output>> field=\"$field$\" index=\"$index$\" default=\"$default$\">\n    <$list filter=\"$selectFilter$\">\n      <option value=<<tmap \"splitAndSelect\" \"|\" \"0\">> >\n        <<tmap \"splitAndSelect\" \"|\" \"1\">>\n      </option>\n    </$list>\n  </$select>\n\\end\n\n\\define input-radio(field, index, default)\n  <$radio tiddler=<<output>> field=\"$field$\" index=\"$index$\" value=\"$value$\" />\n\\end\n\n\\define tmap-row(title, field, index, type, descr, note, default, readonly, selectFilter)\n  <tr>\n    <td class=\"tmap-title\">$title$:</td>\n    <td>\n      <<$type$\n        field:\"$field$\"\n        index:\"$index$\"\n        values:\"$values$\"\n        readonly:\"$readonly$\"\n        default:\"$default$\"\n        selectFilter:\"$selectFilter$\">>\n    </td>\n    <td>\n      <span class=\"tmap-description\">$descr$</span>\n      <$reveal type=\"nomatch\" text=\"\" default=\"$note$\">\n        <div class=\"tmap-note\">''Note:'' $note$</div>\n      </$reveal>\n    </td>\n  </tr>\n\\end"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder": {
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder",
            "text": "$:/plugins/felixhayashi/tiddlymap/graph/views/Default"
        },
        "$:/plugins/felixhayashi/tiddlymap/config/sys": {
            "title": "$:/plugins/felixhayashi/tiddlymap/config/sys",
            "type": "application/json",
            "text": "{ \n  \"field\": {\n    \"nodeId\": \"tmap.id\",\n    \"nodeLabel\": \"caption\",\n    \"nodeIcon\": \"icon\",\n    \"nodeInfo\": \"description\",\n    \"viewMarker\": \"isview\",\n    \"edgeTypeMarker\": \"tmap.is-edge-type\",\n    \"edges\": \"tmap.edges\"\n  },\n  \"suppressedDialogs\": {\n  },\n  \"edgeClickBehaviour\": \"manager\",\n  \"debug\": \"false\",\n  \"notifications\": \"true\",\n  \"editNodeOnCreate\": \"false\",\n  \"singleClickMode\": \"false\"\n}\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/config/vis": {
            "title": "$:/plugins/felixhayashi/tiddlymap/config/vis",
            "type": "application/json",
            "text": "{\n  \"clickToUse\": true,\n  \"autoResize\": false,\n  \"height\": \"100%\",\n  \"width\": \"100%\",\n  \"configure\": {\n    \"enabled\": false\n  },\n  \"interaction\": {\n    \"dragNodes\":true,\n    \"dragView\": true,\n    \"hideEdgesOnDrag\": false,\n    \"hideNodesOnDrag\": false,\n    \"hover\": false,\n    \"navigationButtons\": true,\n    \"selectable\": true,\n    \"selectConnectedEdges\": true,\n    \"tooltipDelay\": 300,\n    \"zoomView\": true,\n    \"keyboard\": {\n      \"enabled\": false,\n      \"speed\": {\n        \"x\": 10,\n        \"y\": 10,\n        \"zoom\": 0.02\n      },\n      \"bindToWindow\": false\n    }\n  },\n  \"nodes\": {\n    \"shape\": \"box\",\n    \"color\": {\n      \"border\" : \"#2B7CE9\",\n      \"background\" : \"#97C2FC\",\n      \"highlight\": {\n        \"border\": \"#2B7CE9\",\n        \"background\": \"#D2E5FF\"\n      },\n      \"hover\": {\n        \"border\": \"white\",\n        \"background\": \"white\"\n      }\n    }\n  },\n  \"edges\": {\n    \"smooth\": {\n      \"enabled\": true\n    },\n    \"color\": {\n      \"color\": \"#848484\",\n      \"inherit\": false\n    },\n    \"arrows\": {\n      \"to\": {\n        \"enabled\": true\n      }\n    }\n  },\n  \"physics\": {\n    \"forceAtlas2Based\": {\n      \"springLength\": 200,\n      \"centralGravity\": 0,\n      \"springConstant\": 0.130\n    },\n    \"solver\": \"forceAtlas2Based\",\n    \"stabilization\": {\n      \"enabled\": true,\n      \"iterations\": 1000,\n      \"updateInterval\": 100,\n      \"onlyDynamicEdges\": false,\n      \"fit\": false\n    }\n  },\n  \"groups\": {\n    \"neighbours\": {\n      \"color\": \"#E6E6E6\"\n    },\n    \"matches\": {\n      \"color\": \"#97C2FC\"\n    }\n  },\n  \n  \"locale\": \"en_EN\"\n}\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/misc/quickConnectButton": {
            "tags": "$:/tags/ViewToolbar",
            "title": "$:/plugins/felixhayashi/tiddlymap/misc/quickConnectButton",
            "description": "{{$:/language/Buttons/TiddlyMap/Hint}}",
            "caption": "{{$:/plugins/felixhayashi/tiddlymap/icon}} {{$:/language/Buttons/TiddlyMap/Caption}}",
            "text": "\\define tiddlerSearchFilter()\n  [!is[system]!has[draft.of]search:title{$:/temp/quickConnectSearch}sort[title]]\n\\end\n\n\\define showButton(state)\n<$button set=\"$:/temp/tiddlymap/quickConnectButton\"\n         setTo=\"$state$\" tooltip={{$:/language/Buttons/TiddlyMap/Hint}} \n         aria-label={{$:/language/Buttons/TiddlyMap/Caption}}\n         class=<<tv-config-toolbar-class>>>\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">\n{{$:/plugins/felixhayashi/tiddlymap/icon}}\n</$list>\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\n<span class=\"tc-btn-text\"><$text text={{$:/language/Buttons/TiddlyMap/Caption}}/></span>\n</$list>\n</$button>\n\\end\n\n\\define hidePopup()\n<$macrocall $name=\"showButton\" state=<<qualify>> />\n\\end\n\n\\define showPopup()\n<$macrocall $name=\"showButton\" state=\"\" />\n<div class=\"tmap-quick-connect tc-reveal tc-popup\">\n  <div class=\"tc-drop-down\">\n    <div>{{$:/core/images/close-others-button}} ''Create connection'' <sup>[1]</sup></div>\n    <table>\n      <tr>\n        <td>Type:</td>\n        <td>\n          <$edit-text tiddler=\"$:/temp/quickConnectSearch/type\" field=\"text\" type=\"text\" tag=\"input\" default=\"\" />\n          <$select tiddler=\"$:/temp/quickConnectSearch/type\" default=\"\">\n            <option></option>\n            <$list filter=<<tmap \"option\" \"selector.allEdgeTypesByLabel\">>  >\n              <option>{{!!title}}</option>\n            </$list>\n          </$select>\n        </td>\n      </tr>\n      <tr>\n        <td>Search:</td>\n        <td>\n          <$edit-text tiddler=\"$:/temp/quickConnectSearch\" type=\"search\" tag=\"input\" default=\"\"></$edit-text>\n          <small><$count filter=<<tiddlerSearchFilter>> /> results</small>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\">\n          <table class=\"tmap-very-small-list\">\n            <$list filter=<<tiddlerSearchFilter>> variable=\"item\" emptyMessage=\"//No results//\">\n            <tr>\n              <td>\n                <$button>⇦\n                  <$action-sendmessage $message=\"tmap:tm-create-edge\"\n                                       from=<<item>>\n                                       to=<<currentTiddler>>\n                                       label={{$:/temp/quickConnectSearch/type}}\n                                       view={{$:/temp/quickConnectSearch/view}} />\n                </$button>\n              </td>\n              <td>\n                <$button>⇨\n                  <$action-sendmessage $message=\"tmap:tm-create-edge\"\n                                       from=<<currentTiddler>>\n                                       to=<<item>>\n                                       label={{$:/temp/quickConnectSearch/type}}\n                                       view={{$:/temp/quickConnectSearch/view}} />\n                </$button>\n              </td>\n              <td><$view tiddler=<<item>> field=\"title\" /></td>\n            </tr>\n            </$list>\n          </table>\n        </td>\n      </tr>\n    </table>\n    <hr />\n    <div>''Existing Connections''</div>\n    <p>\n      <$tmap-connections>\n        <div>\n          <$button class=\"tc-btn-invisible\">{{$:/core/images/close-button}}\n            <$action-sendmessage $message=\"tmap:tm-remove-edge\" id=<<edge.id>> from=<<edge.from>> to=<<edge.to>> type=<<edge.type>> />\n          </$button>\n          <<direction>>\n          <$link to=<<neighbour>>>\n            <$view field=\"title\" />\n          </$link>\n          (<<edge.type>>)\n        </div>\n      </$tmap-connections>\n    </p>      \n  </div>\n</div>\n\\end\n\n<$list filter=\"[{$:/temp/tiddlymap/quickConnectButton}prefix<qualify>first[]]\"\n       variable=\"item\" emptyMessage=<<hidePopup>>><<showPopup>>\n</$list>"
        },
        "$:/plugins/felixhayashi/tiddlymap/hook/editor": {
            "caption": "Map",
            "tags": "$:/tags/SideBar",
            "title": "$:/plugins/felixhayashi/tiddlymap/hook/editor",
            "text": "<$tiddlymap\n  editor=\"advanced\"\n  object-id=\"main_editor\"\n  click-to-use=\"false\"\n  width=\"calc(100% - 15px)\"\n  bottom-spacing=\"35px\">\n</$tiddlymap>"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/edges": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/edges",
            "filter": "[prefix[$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes]]"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/nodes": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Default/filter/nodes",
            "filter": "[!is[system]!has[draft.of]] +[limit[100]]"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Default": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Default",
            "config.physics_mode": "true",
            "isview": "true"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/edges": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/edges",
            "filter": "[prefix[$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes]]",
            "text": "\n\n"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/nodes": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View/filter/nodes",
            "filter": "[!is[system]field:title{$:/temp/focussedTiddler}]"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Live View",
            "config.neighbourhood_scope": "1",
            "config.refresh-triggers": "$:/temp/focussedTiddler",
            "config.physics_mode": "true",
            "isview": "true"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search/filter/nodes": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search/filter/nodes",
            "filter": "[!is[system]search{$:/temp/search}] [!is[system]search:tags{$:/temp/search}] [!is[system]search:text{$:/temp/search}limit[10]]"
        },
        "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search": {
            "title": "$:/plugins/felixhayashi/tiddlymap/graph/views/Graph search",
            "config.neighbourhood_scope": "1",
            "config.physics_mode": "true"
        },
        "$:/plugins/felixhayashi/tiddlymap/widget/connections.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/widget/connections.js\ntype: application/javascript\nmodule-type: widget\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";var e=require(\"$:/core/modules/widgets/widget.js\").widget;var t=require(\"$:/plugins/felixhayashi/tiddlymap/edgetype.js\").EdgeType;var r=function(t,r){e.call(this,t,r);this.utils=$tw.tmap.utils};r.prototype=Object.create(e.prototype);r.prototype.render=function(e,t){this.parentDomNode=e;this.computeAttributes();this.execute();this.renderChildren(e,t)};r.prototype.execute=function(){var e=[this.getVariable(\"currentTiddler\")];var t={typeWL:$tw.tmap.adapter.getEdgeTypeWhiteList(\"[!suffix[tw-body:link]]\")};var r=$tw.tmap.adapter.getNeighbours(e,t);var i=r.nodes;var s=r.edges;var a=[];for(var o in s){var n=s[o];var d=i[n.to]?\"To\":\"From\";var p=i[n[d.toLowerCase()]];if(!p)continue;a.push({type:\"tmap-edgelistitem\",edge:n,neighbour:p,direction:d,children:this.parseTreeNode.children})}this.makeChildWidgets(a)};r.prototype.refresh=function(e){for(var t in e){if(!this.utils.isSystemOrDraft(t)){this.refreshSelf();return true}}return this.refreshChildren(e)};exports[\"tmap-connections\"]=r;var i=function(t,r){e.call(this,t,r);this.utils=$tw.tmap.utils};i.prototype=Object.create(e.prototype);i.prototype.execute=function(){var e=this.parseTreeNode;var t=$tw.tmap.indeces.tById[e.neighbour.id];var r=this.utils.flatten(e.edge);for(var i in r){if(typeof r[i]===\"string\"){this.setVariable(\"edge.\"+i,r[i])}}this.setVariable(\"currentTiddler\",t);this.setVariable(\"neighbour\",t);this.setVariable(\"direction\",e.direction);this.makeChildWidgets()};i.prototype.refresh=function(e){return this.refreshChildren(e)};exports[\"tmap-edgelistitem\"]=i})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/widget/connections.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/felixhayashi/tiddlymap/widget/map.js": {
            "text": "/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/widget/map.js\ntype: application/javascript\nmodule-type: widget\n\n@module TiddlyMap\n@preserve\n\n\\*/\n(function(){\"use strict\";var e=require(\"$:/core/modules/widgets/widget.js\").widget;var t=require(\"$:/plugins/felixhayashi/tiddlymap/view_abstraction.js\").ViewAbstraction;var i=require(\"$:/plugins/felixhayashi/tiddlymap/callback_manager.js\").CallbackManager;var s=require(\"$:/plugins/felixhayashi/tiddlymap/dialog_manager.js\").DialogManager;var r=require(\"$:/plugins/felixhayashi/tiddlymap/utils.js\").utils;var a=require(\"$:/plugins/felixhayashi/tiddlymap/edgetype.js\").EdgeType;var n=require(\"$:/plugins/felixhayashi/vis/vis.js\");var o=function(t,a){e.call(this);this.initialise(t,a);this.adapter=$tw.tmap.adapter;this.opt=$tw.tmap.opt;this.notify=$tw.tmap.notify;this.callbackManager=new i;this.dialogManager=new s(this.callbackManager,this);this.computeAttributes();this.objectId=this.getAttribute(\"object-id\")?this.getAttribute(\"object-id\"):r.genUUID();this.editorMode=this.getAttribute(\"editor\");if(this.editorMode){r.addListeners({\"tmap:tm-create-view\":this.handleCreateView,\"tmap:tm-rename-view\":this.handleRenameView,\"tmap:tm-delete-view\":this.handleDeleteView,\"tmap:tm-edit-view\":this.handleEditView,\"tmap:tm-configure-system\":this.handleConfigureSystem,\"tmap:tm-store-position\":this.handleStorePositions,\"tmap:tm-edit-filters\":this.handleEditFilters,\"tmap:tm-generate-widget\":this.handleGenerateWidget},this,this)}r.addListeners({\"tmap:tm-focus-node\":this.handleFocusNode,\"tmap:tm-reset-focus\":this.repaintGraph},this,this)};o.prototype=Object.create(e.prototype);o.prototype.handleConnectionEvent=function(e,t){var i={fromLabel:this.adapter.selectNodeById(e.from).label,toLabel:this.adapter.selectNodeById(e.to).label};this.dialogManager.open(\"getEdgeType\",i,function(i,s){if(i){var n=r.getText(s);var o=r.hasSubString(n,\":\");var d=this.view.getConfig(\"edge_type_namespace\");n=new a((d&&!o?d:\"\")+n);if(!n.exists())n.persist();e.type=n.getId();var h=this.adapter.insertEdge(e);var l=this.view.getEdgeFilter(\"compiled\");var g=this.adapter.getEdgeTypeWhiteList(l);if(!g[n.getId()]){var p={type:n.getId(),view:this.view.getLabel()};$tw.tmap.dialogManager.open(\"edgeNotVisible\",p)}this.preventFitAfterRebuild=true}if(typeof t==\"function\"){t(i)}})};o.prototype.checkForFreshInstall=function(){if(r.getEntry(this.opt.ref.sysMeta,\"showWelcomeMessage\",true)){r.setEntry(this.opt.ref.sysMeta,\"showWelcomeMessage\",false);this.dialogManager.open(\"welcome\")}};o.prototype.openStandardConfirmDialog=function(e,t){var i={message:t};this.dialogManager.open(\"getConfirmation\",i,e)};o.prototype.logger=function(e,t){var i=Array.prototype.slice.call(arguments,1);i.unshift(\"@\"+this.objectId.toUpperCase());i.unshift(e);$tw.tmap.logger.apply(this,i)};o.prototype.render=function(e,t){this.parentDomNode=e;if(r.isPreviewed(this)){this.initAndRenderPlaceholder(e);return}this.registerClassNames(e);this.sidebar=r.getFirstElementByClassName(\"tc-sidebar-scrollable\");this.isContainedInSidebar=this.sidebar&&this.sidebar.contains(this.parentDomNode);this.viewHolderRef=this.getViewHolderRef();this.view=this.getView();this.doFitAfterStabilize=true;this.preventFitAfterRebuild=false;this.initAndRenderEditorBar(e);if(!r.isPreviewed(this)){this.initAndRenderGraph(e)}$tw.tmap.registry.push(this);this.checkOnRefreshTriggers();this.checkForFreshInstall()};o.prototype.registerClassNames=function(e){if(!$tw.utils.hasClass(e,\"tmap-widget\")){var t=[\"tmap-widget\"];if(this.isClickToUse()){t.push(\"tmap-click-to-use\")}if(this.getAttribute(\"editor\")===\"advanced\"){t.push(\"tmap-advanced-editor\")}if(!r.isTrue(this.getAttribute(\"show-buttons\"),true)){t.push(\"tmap-no-buttons\")}if(this.getAttribute(\"class\")){t.push(this.getAttribute(\"class\"))}$tw.utils.addClass(e,t.join(\" \"));this.graphLoadingBarDomNode=document.createElement(\"div\");$tw.utils.addClass(this.graphLoadingBarDomNode,\"tmap-loading-bar\");e.appendChild(this.graphLoadingBarDomNode)}};o.prototype.initAndRenderEditorBar=function(e){this.graphBarDomNode=document.createElement(\"div\");$tw.utils.addClass(this.graphBarDomNode,\"tmap-topbar\");e.appendChild(this.graphBarDomNode);this.rebuildEditorBar();this.renderChildren(this.graphBarDomNode)};o.prototype.initAndRenderPlaceholder=function(e){$tw.utils.addClass(e,\"tmap-graph-placeholder\")};o.prototype.rebuildEditorBar=function(){var e=r.flatten({param:{viewLabel:this.view.getLabel(),isViewBound:String(this.isViewBound()),ref:{view:this.view.getRoot(),viewHolder:this.getViewHolderRef(),edgeFilter:this.view.getPaths().edgeFilter},allEdgesFilter:this.opt.selector.allEdgeTypes,searchOutput:\"$:/temp/tmap/bar/search\",nodeFilter:\"[list[$:/temp/tmap/nodes/\"+this.view.getLabel()+\"]\"+\"search:title{$:/temp/tmap/bar/search}]\"}});for(var t in e){this.setVariable(t,e[t])}var i={type:\"tiddler\",attributes:{tiddler:{type:\"string\",value:this.view.getRoot()}},children:[]};if(this.editorMode===\"advanced\"){i.children.push({type:\"transclude\",attributes:{tiddler:{type:\"string\",value:this.opt.ref.graphBar}}})}else{i.children.push({type:\"element\",tag:\"span\",attributes:{\"class\":{type:\"string\",value:\"tmap-view-label\"}},children:[{type:\"text\",text:e[\"param.viewLabel\"]}]})}i.children.push({type:\"transclude\",attributes:{tiddler:{type:\"string\",value:this.opt.ref.focusButton}}});this.makeChildWidgets([i])};o.prototype.refresh=function(e){if(this.isZombieWidget()||!this.network||r.isPreviewed(this))return;this.callbackManager.handleChanges(e);var t=this.isViewSwitched(e);var i=this.view.refresh(e);if(t||i.length){var s={resetData:true,resetOptions:true,resetFocus:{delay:0,duration:0}};if(t){this.logger(\"warn\",\"View switched\");this.view=this.getView(true)}else{this.logger(\"warn\",\"View modified\",i);s.resetData=false;if(this.preventFitAfterRebuild){s.resetFocus=false}}this.rebuildGraph(s);this.checkOnRefreshTriggers()}else{this.checkOnGraph(e)}this.checkOnEditorBar(e,t,i)};o.prototype.checkOnRefreshTriggers=function(){this.callbackManager.remove(this.refreshTriggers);var e=this.getAttribute(\"refresh-triggers\")||this.view.getConfig(\"refresh-triggers\");this.refreshTriggers=$tw.utils.parseStringArray(e)||[];this.logger(\"debug\",\"Registering refresh trigger\",this.refreshTriggers);for(var t=0;t<this.refreshTriggers.length;t++){this.callbackManager.add(this.refreshTriggers[t],this.handleTriggeredRefresh.bind(this),false)}};o.prototype.rebuildGraph=function(e){if(r.isPreviewed(this))return;this.logger(\"debug\",\"Rebuilding graph\");e=e||{};this.hasNetworkStabilized=false;this.network.selectNodes([]);if(e.resetData){this.graphData.edges.clear();this.graphData.nodes.clear();this.graphData.edgesById=null;this.graphData.nodesById=null}if(e.resetOptions){this.graphOptions=this.getGraphOptions();this.network.setOptions(this.graphOptions)}if(!e.resetFocus){this.doFitAfterStabilize=false}this.rebuildGraphData(true);if(!r.hasElements(this.graphData.nodesById)){return}this.network.stabilize();if(e.resetFocus&&!this.preventFitAfterRebuild){this.doFitAfterStabilize=true;this.fitGraph(e.resetFocus.delay,e.resetFocus.duration)}this.preventFitAfterRebuild=false};o.prototype.getContainer=function(){return this.parentDomNode};o.prototype.rebuildGraphData=function(e){$tw.tmap.start(\"Reloading Network\");if(!e&&this.graphData){return this.graphData}var t=this.adapter.getGraph({view:this.view});var i=t.nodes;var s=t.edges;this.graphData.nodes=this.getRefreshedDataSet(i,this.graphData.nodesById,this.graphData.nodes);this.graphData.edges=this.getRefreshedDataSet(s,this.graphData.edgesById,this.graphData.edges);this.graphData.nodesById=i;this.graphData.edgesById=s;r.setField(\"$:/temp/tmap/nodes/\"+this.view.getLabel(),\"list\",this.adapter.getTiddlersById(i));$tw.tmap.stop(\"Reloading Network\");return this.graphData};o.prototype.isViewBound=function(){return r.startsWith(this.getViewHolderRef(),this.opt.path.localHolders)};o.prototype.isViewSwitched=function(e){if(this.isViewBound()){return false}else{return r.hasOwnProp(e,this.getViewHolderRef())}};o.prototype.checkOnEditorBar=function(e,t,i){if(t||i.length){this.removeChildDomNodes();this.rebuildEditorBar();this.renderChildren(this.graphBarDomNode);return true}else{return this.refreshChildren(e)}};o.prototype.checkOnGraph=function(e){var t=this.view.getNodeFilter(\"compiled\");var i=r.getMatches(t,Object.keys(e),true);for(var s in e){if(r.isSystemOrDraft(s))continue;var a=i[s];var n=this.graphData.nodesById[this.adapter.getId(s)];if(a||n){this.rebuildGraph({resetFocus:{delay:0,duration:0}});return}}var o=this.view.getEdgeFilter(\"compiled\");var d=r.getMatches(o,Object.keys(e));if(d.length){this.logger(\"info\",\"Changed edge-types\",d);this.rebuildGraph({resetFocus:{delay:0,duration:0}});return}};o.prototype.initAndRenderGraph=function(e){this.logger(\"info\",\"Initializing and rendering the graph\");this.graphDomNode=document.createElement(\"div\");e.appendChild(this.graphDomNode);$tw.utils.addClass(this.graphDomNode,\"tmap-vis-graph\");e.style[\"width\"]=this.getAttribute(\"width\",\"100%\");this.handleResizeEvent=this.handleResizeEvent.bind(this);this.handleClickEvent=this.handleClickEvent.bind(this);window.addEventListener(\"resize\",this.handleResizeEvent,false);if(!this.isContainedInSidebar){this.callbackManager.add(\"$:/state/sidebar\",this.handleResizeEvent)}window.addEventListener(\"click\",this.handleClickEvent,false);var t=r.getFullScreenApis();if(t){window.addEventListener(t[\"_fullscreenChange\"],this.handleFullScreenChange.bind(this),false)}this.handleResizeEvent();this.graphOptions=this.getGraphOptions();this.graphData={nodes:new n.DataSet,edges:new n.DataSet,nodesById:r.getDataMap(),edgesById:r.getDataMap()};this.network=new n.Network(this.graphDomNode,this.graphData,this.graphOptions);this.visNetworkDomNode=this.graphDomNode.firstElementChild;this.addKeyBindings();this.network.on(\"click\",this.handleVisSingleClickEvent.bind(this));this.network.on(\"doubleClick\",this.handleVisDoubleClickEvent.bind(this));this.network.on(\"stabilized\",this.handleVisStabilizedEvent.bind(this));this.network.on(\"dragStart\",this.handleVisDragStart.bind(this));this.network.on(\"dragEnd\",this.handleVisDragEnd.bind(this));this.network.on(\"select\",this.handleVisSelect.bind(this));this.network.on(\"beforeDrawing\",this.handleVisBeforeDrawing.bind(this));this.network.on(\"stabilizationProgress\",this.handleVisLoading.bind(this));this.network.on(\"stabilizationIterationsDone\",this.handleVisLoadingDone.bind(this));this.addGraphButtons({\"fullscreen-button\":function(){this.handleToggleFullscreen(false)}});if(this.isContainedInSidebar){this.addGraphButtons({\"halfscreen-button\":function(){this.handleToggleFullscreen(true)}})}this.rebuildGraph({resetFocus:{delay:0,duration:0}})};o.prototype.addKeyBindings=function(e){this.visNetworkDomNode.tabIndex=0;var t=n.keycharm({container:this.parentDomNode});t.bind(\"delete\",function(){this.handleRemoveElement(this.network.getSelection())}.bind(this))};o.prototype.isClickToUse=function(){return r.isTrue(this.getAttribute(\"click-to-use\"),true)||this.isMobileMode()&&this.objectId===\"main_editor\"};o.prototype.isMobileMode=function(){var e=r.getText(this.opt.ref.sidebarBreakpoint,960);return window.innerWidth<=parseInt(e)};o.prototype.getGraphOptions=function(){var e=this.view.getVisConfig();e.clickToUse=this.isClickToUse();e.manipulation={enabled:this.editorMode?true:false,initiallyActive:true,controlNodeStyle:{}};e.manipulation.deleteNode=function(e,t){this.handleRemoveElement(e);this.resetVisManipulationBar(t)}.bind(this);e.manipulation.deleteEdge=e.manipulation.deleteNode;e.manipulation.addEdge=function(e,t){this.handleConnectionEvent(e);this.resetVisManipulationBar(t)}.bind(this);e.manipulation.addNode=function(e,t){this.handleInsertNode(e);this.resetVisManipulationBar(t)}.bind(this);e.manipulation.editEdge=function(e,t){var i=this.handleReconnectEdge(e);this.resetVisManipulationBar(t)}.bind(this);r.merge(e,{physics:{forceAtlas2Based:{centralGravity:this.view.isEnabled(\"physics_mode\")?.001:0},stabilization:{iterations:this.view.getStabilizationIterations()}}});this.logger(\"debug\",\"Loaded graph options\",e);return e};o.prototype.resetVisManipulationBar=function(e){if(e)e(null);this.network.disableEditMode();this.network.enableEditMode()};o.prototype.handleCreateView=function(){this.dialogManager.open(\"createView\",null,function(e,i){if(e){var s=r.getText(i);var a=new t(s);if(a.isLocked()){this.notify(\"Forbidden!\")}else{var a=this.adapter.createView(s);this.setView(a.getRoot())}}})};o.prototype.handleRenameView=function(){if(!this.view.isLocked()){var e=this.view.getReferences();var i={count:e.length.toString(),filter:r.joinAndWrap(e,\"[[\",\"]]\")};this.dialogManager.open(\"getViewName\",i,function(e,i){if(e){var s=r.getText(i);var a=new t(s);if(a.isLocked()){this.notify(\"Forbidden!\")}else{this.view.rename(s);this.setView(this.view.getRoot())}}})}else{this.notify(\"Forbidden!\")}};o.prototype.handleEditView=function(){var e={view:this.view.getLabel(),createdOn:this.view.getCreationDate(true),numberOfNodes:\"\"+Object.keys(this.graphData.nodesById).length,numberOfEdges:\"\"+Object.keys(this.graphData.edgesById).length,dialog:{preselects:this.view.getConfig()}};this.dialogManager.open(\"configureView\",e,function(e,t){if(e&&t){var i=r.getPropertiesByPrefix(t.fields,\"config.\");this.view.setConfig(i)}})};o.prototype.handleDeleteView=function(){var e=this.view.getLabel();if(this.view.isLocked()){this.notify(\"Forbidden!\");return}var t=this.view.getReferences();if(t.length){var i={count:t.length.toString(),filter:r.joinAndWrap(t,\"[[\",\"]]\")};this.dialogManager.open(\"cannotDeleteViewDialog\",i);return}var s=\"You are about to delete the view \"+\"''\"+e+\"'' (no tiddler currently references this view).\";this.openStandardConfirmDialog(function(t){if(t){this.view.destroy();this.setView(this.opt.path.views+\"/default\");this.notify('view \"'+e+'\" deleted ')}},s)};o.prototype.handleTriggeredRefresh=function(e){var t=r.getMatches(this.view.getNodeFilter(\"compiled\"));var i=$tw.utils.hashString(t.join());if(i!=this.triggerState){this.logger(\"log\",e,\"Triggered a refresh\");this.triggerState=i;this.rebuildGraph({resetData:false,resetOptions:false,resetFocus:{delay:1e3,duration:1e3}})}};o.prototype.handleConfigureSystem=function(){var e={dialog:{preselects:r.flatten({config:{sys:this.opt.config.sys}})}};this.dialogManager.open(\"configureTiddlyMap\",e,function(e,t){if(e&&t){var i=r.getPropertiesByPrefix(t.fields,\"config.sys.\",true);if(i[\"field.nodeId\"]!==this.opt.field.nodeId&&isWelcomeDialog!==true){var s={name:\"Node-id\",oldValue:this.opt.field.nodeId,newValue:i[\"field.nodeId\"]};this.dialogManager.open(\"fieldChanged\",s,function(e,t){if(e){r.moveFieldValues(s.oldValue,s.newValue,true,false);this.notify(\"Transported field values\")}})}this.wiki.setTiddlerData(this.opt.ref.sysConf+\"/user\",i)}})};o.prototype.handleReconnectEdge=function(e){var t=this.graphData.edges.get(e.id);this.adapter.deleteEdge(t);var i=$tw.utils.extend(t,e);this.preventFitAfterRebuild=true;return this.adapter.insertEdge(i)};o.prototype.handleRemoveElement=function(e){if(e.edges.length&&!e.nodes.length){this.handleRemoveEdges(e.edges)}if(e.nodes.length){this.handleRemoveNode(this.graphData.nodesById[e.nodes[0]])}this.resetVisManipulationBar()};o.prototype.handleRemoveEdges=function(e){this.adapter.deleteEdges(this.graphData.edges.get(e));this.notify(\"edge\"+(e.length>1?\"s\":\"\")+\" removed\");this.preventFitAfterRebuild=true};o.prototype.handleRemoveNode=function(e){var t={\"var.nodeLabel\":e.label,\"var.nodeRef\":$tw.tmap.indeces.tById[e.id],dialog:{preselects:{\"opt.delete\":\"from\"+\" \"+(this.view.isExplicitNode(e)?\"filter\":\"system\")}}};this.dialogManager.open(\"deleteNodeDialog\",t,function(t,i){if(t){if(i.fields[\"opt.delete\"]===\"from system\"){this.adapter.deleteNode(e)}else{var s=this.view.removeNodeFromFilter(e);if(!s){this.notify(\"Couldn't remove node from filter\");return}}this.preventFitAfterRebuild=true;this.notify(\"Node removed \"+i.fields[\"opt.delete\"])}})};o.prototype.handleFullScreenChange=function(){var e=r.getFullScreenApis();if(e&&this.enlargedMode===\"fullscreen\"&&!document[e[\"_fullscreenElement\"]]){this.handleToggleFullscreen()}};o.prototype.handleToggleFullscreen=function(e){var t=r.getFullScreenApis();this.logger(\"log\",\"Toggled graph enlargement\");if(this.enlargedMode){this.network.setOptions({clickToUse:this.isClickToUse()});r.findAndRemoveClassNames([\"tmap-\"+this.enlargedMode,\"tmap-has-\"+this.enlargedMode+\"-child\"]);if(this.enlargedMode===\"fullscreen\"){document[t[\"_exitFullscreen\"]]()}this.enlargedMode=null}else{if(!e&&!t){this.dialogManager.open(\"fullscreenNotSupported\");return}this.enlargedMode=this.isContainedInSidebar&&e?\"halfscreen\":\"fullscreen\";$tw.utils.addClass(this.parentDomNode,\"tmap-\"+this.enlargedMode);var i=this.isContainedInSidebar?this.sidebar:r.getFirstElementByClassName(\"tc-story-river\");$tw.utils.addClass(i,\"tmap-has-\"+this.enlargedMode+\"-child\");if(this.enlargedMode===\"fullscreen\"){document.documentElement[t[\"_requestFullscreen\"]](Element.ALLOW_KEYBOARD_INPUT)}this.notify(\"Activated \"+this.enlargedMode+\" mode\");this.network.setOptions({clickToUse:false})}this.handleResizeEvent()};o.prototype.handleGenerateWidget=function(e){$tw.rootWidget.dispatchEvent({type:\"tmap:tm-generate-widget\",paramObject:{view:this.view.getLabel()}})};o.prototype.handleStorePositions=function(e){this.adapter.storePositions(this.network.getPositions(),this.view);if(e){this.notify(\"positions stored\")}};o.prototype.handleEditFilters=function(){var e=r.getPrettyFilter(this.view.getNodeFilter(\"expression\"));var t=r.getPrettyFilter(this.view.getEdgeFilter(\"expression\"));var i={view:this.view.getLabel(),dialog:{preselects:{prettyNodeFilter:e,prettyEdgeFilter:t}}};this.dialogManager.open(\"editFilters\",i,function(i,s){if(i){this.view.setNodeFilter(r.getField(s,\"prettyNodeFilter\",e));this.view.setEdgeFilter(r.getField(s,\"prettyEdgeFilter\",t))}})};o.prototype.handleVisStabilizedEvent=function(e){if(!this.hasNetworkStabilized){this.hasNetworkStabilized=true;this.logger(\"log\",\"Network stabilized after \"+e.iterations+\" iterations\");this.view.setStabilizationIterations(e.iterations);var t=this.view.isEnabled(\"physics_mode\");this.network.storePositions();this.setNodesMoveable(this.graphData.nodesById,t);if(this.doFitAfterStabilize){this.doFitAfterStabilize=false;this.fitGraph(1e3,1e3)}}};o.prototype.handleFocusNode=function(e){this.network.focus(this.adapter.getId(e.param),{scale:1.5,animation:true})};o.prototype.isZombieWidget=function(){return!document.body.contains(this.getContainer())};o.prototype.fitGraph=function(e,t){this.logger(\"debug\",\"Fit graph\",this.activeFitTimeout);window.clearTimeout(this.activeFitTimeout);var i=function(){if(this.isZombieWidget())return;this.network.redraw();this.network.fit({animation:{duration:t||0,easingFunction:\"easeOutQuart\"}})};this.activeFitTimeout=window.setTimeout(i.bind(this),e||0)};o.prototype.handleInsertNode=function(e){this.dialogManager.open(\"getNodeTitle\",null,function(t,i){if(t){var s=r.getText(i);if(r.tiddlerExists(s)){if(r.isMatch(s,this.view.getNodeFilter(\"compiled\"))){this.notify(\"Node already exists\");return}else{e=this.adapter.makeNode(s,e,this.view);this.view.addNodeToView(e)}}else{e.label=s;this.adapter.insertNode(e,{view:this.view,editNodeOnCreate:false})}this.preventFitAfterRebuild=true}})};o.prototype.handleVisSingleClickEvent=function(e){if(r.isTrue(this.opt.config.sys.singleClickMode)){this.handleVisClickEvent(e)}};o.prototype.handleVisDoubleClickEvent=function(e){if(!e.nodes.length&&!e.edges.length){if(this.editorMode){this.handleInsertNode(e.pointer.canvas)}}else if(!r.isTrue(this.opt.config.sys.singleClickMode)){this.handleVisClickEvent(e)}};o.prototype.handleVisClickEvent=function(e){if(e.nodes.length){this.openTiddlerWithId(e.nodes[0])}else if(e.edges.length){if(!this.editorMode)return;this.logger(\"debug\",\"Clicked on an Edge\");var t=this.opt.config.sys.edgeClickBehaviour;var i=new a(this.graphData.edgesById[e.edges[0]].type);if(t===\"manager\"){$tw.rootWidget.dispatchEvent({type:\"tmap:tm-manage-edge-types\",paramObject:{type:i.getId()}})}}};o.prototype.handleResizeEvent=function(e){if(this.isZombieWidget())return;if(this.isContainedInSidebar){var t=window.innerHeight;var i=this.parentDomNode.getBoundingClientRect().top;var s=this.getAttribute(\"bottom-spacing\",\"25px\");var r=t-i+\"px\";this.parentDomNode.style[\"height\"]=\"calc(\"+r+\" - \"+s+\")\"}else{var a=this.getAttribute(\"height\");this.parentDomNode.style[\"height\"]=a?a:\"300px\"}if(this.network){this.repaintGraph()}};o.prototype.handleClickEvent=function(e){if(this.isZombieWidget()||!this.network)return;var t=document.elementFromPoint(e.clientX,e.clientY);if(!this.parentDomNode.contains(t)){var i=this.network.getSelection();if(i.nodes.length||i.edges.length){this.logger(\"debug\",\"Clicked outside; deselecting nodes/edges\");this.network.selectNodes([]);this.resetVisManipulationBar()}}else if(this.graphDomNode.contains(t)){this.visNetworkDomNode.focus()}};o.prototype.handleVisDragEnd=function(e){if(e.nodes.length){var t=this.graphData.nodesById[e.nodes[0]];if(!this.view.isEnabled(\"physics_mode\")){this.setNodesMoveable([t],false);var i=parseInt(this.opt.config.sys.raster);if(i){var s=this.network.getPositions()[t.id];this.graphData.nodes.update({id:t.id,x:s.x-s.x%i,y:s.y-s.y%i})}this.handleStorePositions()}}};o.prototype.handleVisSelect=function(e){};o.prototype.handleVisBeforeDrawing=function(e){};o.prototype.handleVisLoading=function(e){this.graphLoadingBarDomNode.style.display=\"block\";var t=\"Loading \"+e.iterations/e.total*100+\"%\";this.graphLoadingBarDomNode.innerHTML=t};o.prototype.handleVisLoadingDone=function(e){this.graphLoadingBarDomNode.style.display=\"none\"};o.prototype.handleVisDragStart=function(e){if(e.nodes.length){var t=this.graphData.nodesById[e.nodes[0]];this.setNodesMoveable([t],true)}};o.prototype.destruct=function(){window.removeEventListener(\"resize\",this.handleResizeEvent);window.removeEventListener(\"click\",this.handleClickEvent);if(this.network){this.network.destroy()}};o.prototype.openTiddlerWithId=function(e){var t=$tw.tmap.indeces.tById[e];this.logger(\"debug\",\"Opening tiddler\",t,\"with id\",e);if(this.enlargedMode===\"fullscreen\"){this.dispatchEvent({type:\"tm-edit-tiddler\",tiddlerTitle:t});var i=this.wiki.findDraft(t);if(!i)return;var s={param:{ref:i}};this.dialogManager.open(\"fullscreenTiddlerEditor\",s,function(e,t){if(e){this.dispatchEvent({type:\"tm-save-tiddler\",tiddlerTitle:i})}else{this.dispatchEvent({type:\"tm-cancel-tiddler\",tiddlerTitle:i})}})}else{this.dispatchEvent({type:\"tm-navigate\",navigateTo:t})}};o.prototype.getViewHolderRef=function(){if(this.viewHolderRef){return this.viewHolderRef}this.logger(\"info\",\"Retrieving or generating the view holder reference\");var e=this.getAttribute(\"view\");if(e){this.logger(\"log\",'User wants to bind view \"'+e+'\" to graph');var t=this.opt.path.views+\"/\"+e;if(this.wiki.getTiddler(t)){var i=this.opt.path.localHolders+\"/\"+r.genUUID();this.logger(\"log\",'Created an independent temporary view holder \"'+i+'\"');this.wiki.addTiddler(new $tw.Tiddler({title:i,text:t}));this.logger(\"log\",'View \"'+t+'\" inserted into independend holder')}else{this.logger(\"log\",'View \"'+e+'\" does not exist')}}if(typeof i===\"undefined\"){this.logger(\"log\",\"Using default (global) view holder\");var i=this.opt.ref.defaultGraphViewHolder}return i};o.prototype.setView=function(e,t){if(e){if(!t){t=this.viewHolderRef}this.logger(\"info\",'Inserting view \"'+e+'\" into holder \"'+t+'\"');this.wiki.addTiddler(new $tw.Tiddler({title:t,text:e}))}this.view=this.getView(true)};o.prototype.getView=function(e){if(!e&&this.view){return this.view}var i=this.getViewHolderRef();var s=new t(r.getText(i));this.logger(\"info\",'Retrieved view \"'+s.getLabel()+'\" from holder \"'+i+'\"');if(s.exists()){return s}else{this.logger(\"log\",'Warning: View \"'+s.getLabel()+\"\\\" doesn't exist. Default is used instead.\");return new t(\"Default\")}};o.prototype.getRefreshedDataSet=function(e,t,i){if(!i){return new n.DataSet(r.convert(e,\"array\"))}var s=[];for(var a in t){if(!e[a]){s.push(a)}}i.remove(s);var o=i.get({returnType:\"Object\"});var d=[];for(var a in e){var h=e[a];d.push(h)}i.update(d);return i};o.prototype.repaintGraph=function(){var e=r.getFullScreenApis();if(!e||!document[e[\"_fullscreenElement\"]]||this.enlargedMode){this.logger(\"info\",\"Repainting the whole graph\");this.network.redraw();this.fitGraph(0,1e3)}};o.prototype.setGraphButtonEnabled=function(e,t){var i=\"vis-button\"+\" \"+\"tmap-\"+e;var s=r.getFirstElementByClassName(i,this.parentDomNode);$tw.utils.toggleClass(s,\"tmap-button-enabled\",t)};o.prototype.setNodesMoveable=function(e,t){this.network.storePositions();var i=[];var s=Object.keys(e);for(var r=0;r<s.length;r++){var a=e[s[r]].id;var n={id:a,fixed:{x:!t,y:!t}};i.push(n)}this.graphData.nodes.update(i)};o.prototype.addGraphButtons=function(e){var t=r.getFirstElementByClassName(\"vis-navigation\",this.parentDomNode);for(var i in e){var s=document.createElement(\"div\");s.className=\"vis-button \"+\" \"+\"tmap-\"+i;s.addEventListener(\"click\",e[i].bind(this),false);t.appendChild(s);this.setGraphButtonEnabled(i,true)}};if($tw.boot.tasks.trapErrors){var d=window.onerror;window.onerror=function(e,t,i){if($tw.tmap.utils.hasSubString(e,\"NS_ERROR_NOT_AVAILABLE\")&&t==\"$:/plugins/felixhayashi/vis/vis.js\"){console.error(\"Strange firefox related vis.js error (see https://github.com/felixhayashi/TW5-TiddlyMap/issues/125)\",arguments)}else if(d){d.apply(this,arguments)}}}exports.tiddlymap=o})();",
            "title": "$:/plugins/felixhayashi/tiddlymap/widget/map.js",
            "type": "application/javascript",
            "module-type": "widget"
        }
    }
}